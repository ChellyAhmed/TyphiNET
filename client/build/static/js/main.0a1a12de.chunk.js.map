{"version":3,"sources":["assets/img/logo-typhinet.png","constants.js","util/colorHelper.js","pages/dashboard/index.js","App.js","registerServiceWorker.js","reportWebVitals.js","index.js"],"names":["API_ENDPOINT","getColorForGenotype","genotype","getColorForAMR","amr","getColorForDrug","drug","getColorForIncType","incType","getColorForTetracyclines","tetA","useStyles","makeStyles","theme","formControlSelect","marginTop","spacing","marginBottom","minWidth","color","borderBottomColor","CustomSlider","withStyles","root","thumb","boxShadow","valueLabel","fontFamily","fontWeight","Slider","CustomCircularProgress","CircularProgress","CustomToggleButton","padding","selected","backgroundColor","ToggleButton","DashboardPage","classes","useState","coordinates","zoom","controlMapPosition","setControlMapPosition","samplesQty","setSamplesQty","worldMapSamplesData","setWorldMapSamplesData","worldMapComplementaryData","setWorldMapComplementaryData","worldMapGenotypesData","setWorldMapGenotypesData","worldMapH58Data","setWorldMapH58Data","worldMapMDRData","setWorldMapMDRData","worldMapXDRData","setWorldMapXDRData","worldMapDCSData","setWorldMapDCSData","worldMapAZITHData","setWorldMapAZITHData","worldMapCIPIData","setWorldMapCIPIData","worldMapCIPRData","setWorldMapCIPRData","worldMapDrugsData","setWorldMapDrugsData","worldMapAmrProfilesData","setWorldMapAmrProfilesData","worldMapPlasmidIncompatibilityTypeData","setWorldMapPlasmidIncompatibilityTypeData","plotAmrClassChart","setPlotAmrClassChart","plotDrugsAndGenotypesChart","setPlotDrugsAndGenotypesChart","plotPopulationStructureChart","setPlotPopulationStructureChart","plotDrugTrendsChart","setPlotDrugTrendsChart","captureControlMapInProgress","setCaptureControlMapInProgress","captureControlChartRFWGInProgress","setCaptureControlChartRFWGInProgress","captureControlChartDRTInProgress","setCaptureControlChartDRTInProgress","captureControlChartGDInProgress","setCaptureControlChartGDInProgress","captureControlChartRFWAGInProgress","setCaptureControlChartRFWAGInProgress","tooltipContent","setTooltipContent","allCountries","setAllCountries","React","timePeriodRange","setTimePeriodRange","actualTimePeriodRange","setActualTimePeriodRange","countriesForFilter","setCountriesForFilter","actualCountry","setActualCountry","populationStructureFilter","setPopulationStructureFilter","amrClassesForFilter","amrClassFilter","setAmrClassFilter","drugTrendsChartData","setDrugTrendsChartData","drugsAndGenotypesChartData","setDrugsAndGenotypesChartData","chartMaxHeight","setChartMaxHeight","chartMaxWidth","setChartMaxWidth","populationStructureChartData","setPopulationStructureChartData","amrClassChartData","setAmrClassChartData","mapView","setMapView","dataset","setDataset","totalGenomes","setTotalGenomes","actualGenomes","setActualGenomes","totalGenotypes","setTotalGenotypes","actualGenotypes","setActualGenotypes","appLoading","setAppLoading","allGenotypes","setAllGenotypes","open","setOpen","handleClose","desktop","mobile","middle","height","window","innerHeight","width","innerWidth","dimensions","setDimensions","useEffect","document","getElementsByClassName","style","overflow","remove","debouncedHandleResize","fn","ms","timer","_","clearTimeout","setTimeout","apply","arguments","debounce","addEventListener","removeEventListener","sort","a","b","localeCompare","genotypes","arraysEqual","a1","a2","JSON","stringify","axios","get","then","res","limits","data","min","max","countries","value","timeOutId","response","parseDataForGenotypeChart","finalPopulationStructureChartData","genomes","forEach","entry","some","g","GENOTYPE","push","e","name","YEAR","year","find","yearIndex","findIndex","undefined","genotypeSimple","genotypeSimpleIndex","length","sum","Object","entries","total","populationStructureChartSums","_year","highestSum","Math","ceil","parseDataForCountryMap","genotypesData","drugsData","amrData","finalCountries","samplesData","h58Data","mdrData","xdrData","incTypesData","dcsData","azithData","cipIData","cipRData","countData","array","elementToCount","parentName","childName","temp","country","countryIndex","parent","index","count","displayName","congoCountryIndex","centralAfricanRepublicCountryIndex","ivoryCoastCountryIndex","timorLesteCountryIndex","unshift","includes","percentage","round","toFixed","MDRs","mdr","type","parseFloat","XDRs","xdr","DCSs","dcs","AZs","az","CipIs","cipIs","CipRs","cipRs","dataForCountingDrugs","DRUGS","DRUG","incTypes","filter","parseDataForAmrClassChart","finalChartData","maxSum","totalSum","genotypeIndex","GENE","errorMargin","lowerValue","total2","toString","top10","element","parseDataForDrugTrendsChart","finalDrugTrendsChartData","finalDrugsAndGenotypesChartData","allDrugs","slice","maxValue","drugsPercentage","key","aux","higherPercentage","genotypeChartResponse","drugTrendsChartResponse","classChartResponse","mapSamplesColorScale","scaleLinear","domain","range","mapRedColorScale","tooltip","useCallback","positionY","width1","width2","wrapperS","stroke","chart","position","y","x","wrapperStyle","content","active","payload","label","reverse","border","display","flexDirection","fontSize","flexWrap","map","item","dataKey","alignItems","fill","flex","marginLeft","wordWrap","maxH","margin","top","bottom","right","strokeDasharray","interval","tick","zIndex","stackId","layout","barSize","armClassFilterComponent","info","left","allowEscapeViewBox","justifyContent","overflowX","bars","fontsize","strokeWidth","cotrim","colors1","colors2","colors3","props","paddingLeft","marginRight","borderRadius","flexShrink","connectNulls","dot","className","paddingBottom","getPopulationStructureChartLabel","imgOnLoadPromise","obj","Promise","resolve","reject","onload","onerror","stopLoading","id","names","domtoimage","toPng","getElementById","quality","bgcolor","dataUrl","link","createElement","download","href","click","svgAsPngUri","scale","uri","canvas","ctx","getContext","mapImg","mapImgPromise","src","fillStyle","fillRect","drawImage","typhinetLogo","typhinetLogoPromise","typhinetLogoImg","typhinetLogoWidth","typhinetLogoHeight","base64","toDataURL","capturePicture","dowloadBaseSpreadsheet","generateMapLegendOptions","percentageSteps","Array","keys","n","samplesLegend","maxHeight","overflowY","renderMapLegend","FormControl","fullWidth","InputLabel","whiteSpace","Select","onChange","evt","target","MenuItem","alt","icon","faInfoCircle","onClick","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","textAlign","data-tip","projectionConfig","rotate","center","onMoveEnd","geography","geographies","geo","sample","s","properties","NAME","d","amrProfiles","lineage","drugs","cursor","onMouseEnter","additionalInfo","samples","GENOTYPES","TOTAL","H58","MDR","DCS","CipI","CipR","AzithR","amrProfilesInfo","genotypeInfo","simpleGenotypeInfo","mdrInfo","xdrInfo","dcsInfo","azInfo","cipIInfo","cipRInfo","drugsInfo","incTypesInfo","default","outline","hover","pressed","rsmKey","Typography","ToggleButtonGroup","exclusive","size","newDataset","gutterBottom","valueLabelDisplay","Zoom","in","c","Tooltip","title","placement","faCrosshairs","pos","faPlus","faMinus","faCamera","thickness","substring","paddingRight","paddingTop","alignSelf","amrClass","faTable","rel","faEnvelope","faGithub","faTwitter","Fab","aria-label","faUndoAlt","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createMuiTheme","palette","primary","main","ReactDOM","render","StrictMode","ThemeProvider","URL","process","origin","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"u3xIAAe,MAA0B,0C,SCA5BA,EAAe,6BCAfC,EAAsB,SAACC,GAClC,OAAQA,GACN,IAAK,IACH,MAAO,UACT,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,aACH,MAAO,UACT,IAAK,QACL,IAAK,MACL,IAAK,QACL,IAAK,QACL,IAAK,QACH,MAAO,UACT,IAAK,MACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACH,MAAO,UACT,IAAK,MACL,IAAK,QACH,MAAO,UACT,IAAK,IACL,IAAK,QACL,IAAK,QACL,IAAK,QACH,MAAO,UACT,IAAK,QACL,IAAK,MACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,UACL,IAAK,UACH,MAAO,UACT,IAAK,MACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACH,MAAO,UACT,IAAK,MACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACH,MAAO,UACT,IAAK,QACL,IAAK,MACL,IAAK,QACH,MAAO,UACT,IAAK,QACL,IAAK,MACL,IAAK,QACL,IAAK,QACH,MAAO,UACT,IAAK,QACL,IAAK,IACL,IAAK,QACL,IAAK,QACH,MAAO,UACT,IAAK,QACL,IAAK,MACL,IAAK,QACL,IAAK,QACH,MAAO,UACT,IAAK,QACL,IAAK,MACL,IAAK,QACH,MAAO,UACT,IAAK,QACL,IAAK,MACL,IAAK,QACL,IAAK,QACL,IAAK,YACL,IAAK,YACH,MAAO,UACT,IAAK,MACH,MAAO,UACT,IAAK,MACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACH,MAAO,UACT,IAAK,IACL,IAAK,QACL,IAAK,MACL,IAAK,QACH,MAAO,UACT,IAAK,MACL,IAAK,QACL,IAAK,QACL,IAAK,QACH,MAAO,UACT,IAAK,MACL,IAAK,QACL,IAAK,QACH,MAAO,UACT,IAAK,UACL,IAAK,cACH,MAAO,UACT,IAAK,UACL,IAAK,cACL,IAAK,cACH,MAAO,UACT,IAAK,UACL,IAAK,cACH,MAAO,UACT,QACE,MAAO,YAIAC,EAAiB,SAACC,GAC7B,OAAQA,GACN,IAAK,kBACH,MAAO,UACT,IAAK,UACH,MAAO,UACT,IAAK,MACH,MAAO,MACT,IAAK,MACH,MAAO,UACT,IAAK,aACH,MAAO,UACT,IAAK,aACH,MAAO,UACT,IAAK,iBACH,MAAO,UACT,IAAK,MACH,MAAO,QACT,IAAK,MACH,MAAO,UACT,IAAK,UACH,MAAO,UACT,QACE,MAAO,YAeAC,EAAkB,SAACC,GAC9B,OAAQA,GACN,IAAK,eACH,MAAO,mBACT,IAAK,yBACH,MAAO,mBACT,IAAK,OACH,MAAO,mBACT,IAAK,kBACH,MAAO,mBACT,IAAK,aACH,MAAO,mBACT,IAAK,iBACH,MAAO,mBACT,IAAK,gBACH,MAAO,mBACT,IAAK,eACH,MAAO,mBACT,IAAK,gBACH,MAAO,mBACT,QACE,MAAO,YAIAC,EAAqB,SAACC,GACjC,OAAQA,GACN,IAAK,QACH,MAAO,mBACT,IAAK,cACH,MAAO,kBACT,IAAK,gBACH,MAAO,kBACT,IAAK,UACH,MAAO,iBACT,IAAK,QACH,MAAO,mBACT,IAAK,mCACH,MAAO,gBACT,IAAK,aACH,MAAO,mBACT,IAAK,uBACH,MAAO,iBACT,IAAK,OACH,MAAO,kBACT,IAAK,eACH,MAAO,kBACT,IAAK,QACH,MAAO,iBACT,IAAK,UACH,MAAO,mBACT,IAAK,QACH,MAAO,iBACT,IAAK,OACH,MAAO,mBACT,IAAK,mBACH,MAAO,gBACT,IAAK,YACH,MAAO,kBACT,IAAK,iBACH,MAAO,kBACT,IAAK,UACH,MAAO,iBACT,IAAK,SACH,MAAO,iBACT,IAAK,oBACH,MAAO,kBACT,IAAK,sBACH,MAAO,kBACT,IAAK,UACH,MAAO,gBACT,IAAK,SACH,MAAO,mBACT,IAAK,QACH,MAAO,mBACT,QACE,MAAO,YAIAC,EAA2B,SAACC,GACvC,OAAQA,GACN,IAAK,UACH,MAAO,mBACT,IAAK,UACH,MAAO,UACT,IAAK,UACH,MAAO,UACT,IAAK,UACH,MAAO,UA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","file":"static/js/main.0a1a12de.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo-typhinet.791189fb.png\";","export const API_ENDPOINT = \"http://localhost:8080/api/\";\r\n//export const API_ENDPOINT = \"https://typhinet.herokuapp.com/api/\";","export const getColorForGenotype = (genotype) => {\r\n  switch (genotype) {\r\n    case '0':\r\n      return \"#000000\";\r\n    case '0.0.1':\r\n    case '0.0.2':\r\n    case '0.0.3':\r\n    case '4.3.1.1.P1':\r\n      return \"#000000\";\r\n    case '0.1.0':\r\n    case '0.1':\r\n    case '0.1.1':\r\n    case '0.1.2':\r\n    case '0.1.3':\r\n      return \"#808080\";\r\n    case '1.1':\r\n    case '1.1.1':\r\n    case '1.1.2':\r\n    case '1.1.3':\r\n    case '1.1.4':\r\n      return \"#ffff00\";\r\n    case '1.2':\r\n    case '1.2.1':\r\n      return \"#ffd700\";\r\n    case '2':\r\n    case '2.0.0':\r\n    case '2.0.1':\r\n    case '2.0.2':\r\n      return \"#32cd32\";\r\n    case '2.1.0':\r\n    case '2.1':\r\n    case '2.1.1':\r\n    case '2.1.2':\r\n    case '2.1.3':\r\n    case '2.1.4':\r\n    case '2.1.5':\r\n    case '2.1.6':\r\n    case '2.1.7':\r\n    case '2.1.8':\r\n    case '2.1.9':\r\n    case '2.1.7.1':\r\n    case '2.1.7.2':\r\n      return \"#adff2f\";\r\n    case '2.2':\r\n    case '2.2.0':\r\n    case '2.2.1':\r\n    case '2.2.2':\r\n    case '2.2.3':\r\n    case '2.2.4':\r\n      return \"#98fb98\";\r\n    case '2.3':\r\n    case '2.3.1':\r\n    case '2.3.2':\r\n    case '2.3.3':\r\n    case '2.3.4':\r\n    case '2.3.5':\r\n      return \"#6b8e23\";\r\n    case '2.4.0':\r\n    case '2.4':\r\n    case '2.4.1':\r\n      return \"#2e8b57\";\r\n    case '2.5.0':\r\n    case '2.5':\r\n    case '2.5.1':\r\n    case '2.5.2':\r\n      return \"#006400\";\r\n    case '3.0.0':\r\n    case '3':\r\n    case '3.0.1':\r\n    case '3.0.2':\r\n      return \"#0000cd\";\r\n    case '3.1.0':\r\n    case '3.1':\r\n    case '3.1.1':\r\n    case '3.1.2':\r\n      return \"#4682b4\";\r\n    case '3.2.1':\r\n    case '3.2':\r\n    case '3.2.2':\r\n      return \"#00bfff\";\r\n    case '3.3.0':\r\n    case '3.3':\r\n    case '3.3.1':\r\n    case '3.3.2':\r\n    case '3.3.2.Bd1':\r\n    case '3.3.2.Bd2':\r\n      return \"#1e90ff\";\r\n    case '3.4':\r\n      return \"#6a5acd\";\r\n    case '3.5':\r\n    case '3.5.1':\r\n    case '3.5.2':\r\n    case '3.5.3':\r\n    case '3.5.4':\r\n      return \"#4b0082\";\r\n    case '4':\r\n    case '4.1.0':\r\n    case '4.1':\r\n    case '4.1.1':\r\n      return \"#8b0000\";\r\n    case '4.2':\r\n    case '4.2.1':\r\n    case '4.2.2':\r\n    case '4.2.3':\r\n      return \"#ff6347\";\r\n    case '4.3':\r\n    case '4.3.0':\r\n    case '4.3.1':\r\n      return \"#ff0000\";\r\n    case '4.3.1.1':\r\n    case '4.3.1.1.EA1':\r\n      return \"#f1b6da\";\r\n    case '4.3.1.2':\r\n    case '4.3.1.2.EA2':\r\n    case '4.3.1.2.EA3':\r\n      return \"#c51b7d\";\r\n    case '4.3.1.3':\r\n    case '4.3.1.3.Bdq':\r\n      return \"#fb8072\";\r\n    default:\r\n      return \"#F5F4F6\";\r\n  }\r\n}\r\n\r\nexport const getColorForAMR = (amr) => {\r\n  switch (amr) {\r\n    case 'No AMR detected':\r\n      return \"#addd8e\";\r\n    case 'MDR_DCS':\r\n      return \"#9e9ac8\"\r\n    case 'MDR':\r\n      return \"red\"\r\n    case 'DCS':\r\n      return \"#6baed6\"\r\n    case 'AzithR_MDR':\r\n      return \"#a50f15\"\r\n    case 'AzithR_DCS':\r\n      return \"#7a0177\"\r\n    case 'AzithR_DCS_MDR':\r\n      return \"#54278f\"\r\n    case 'XDR':\r\n      return \"black\"\r\n    case 'AMR':\r\n      return \"#ffeda0\"\r\n    case 'AMR_DCS':\r\n      return \"#fd8d3c\";\r\n    default:\r\n      return \"#F5F4F6\";\r\n  }\r\n}\r\n\r\nexport const getColorForSimpleGenotype = (genotype) => {\r\n  switch (genotype) {\r\n    case 'H58':\r\n      return \"green\";\r\n    case 'Non-H58':\r\n      return \"red\";\r\n    default:\r\n      return \"#F5F4F6\";\r\n  }\r\n}\r\n\r\nexport const getColorForDrug = (drug) => {\r\n  switch (drug) {\r\n    case 'Azithromycin':\r\n      return \"rgb(144,211,199)\";\r\n    case 'Fluoroquinolones (DCS)':\r\n      return \"rgb(255,236,120)\";\r\n    case 'ESBL':\r\n      return \"rgb(190,186,217)\";\r\n    case 'Chloramphenicol':\r\n      return \"rgb(249,129,117)\";\r\n    case 'Ampicillin':\r\n      return \"rgb(129,178,210)\";\r\n    case 'Co-trimoxazole':\r\n      return \"rgb(252,180,105)\";\r\n    case 'Sulphonamides':\r\n      return \"rgb(180,221,112)\";\r\n    case 'Trimethoprim':\r\n      return \"rgb(102,102,255)\";\r\n    case 'Tetracyclines':\r\n      return \"rgb(251,207,229)\";\r\n    default:\r\n      return \"#F5F4F6\";\r\n  }\r\n}\r\n\r\nexport const getColorForIncType = (incType) => {\r\n  switch (incType) {\r\n    case 'IncX1':\r\n      return 'rgb(174,227,154)'\r\n    case 'IncFIA(HI1)':\r\n      return 'rgb(138,35,139)'\r\n    case 'IncFIB(pHCM2)':\r\n      return 'rgb(163,215,30)'\r\n    case 'IncA/C2':\r\n      return 'rgb(69,51,214)'\r\n    case 'IncP1':\r\n      return 'rgb(223,207,231)'\r\n    case 'IncFIA(HI1)/IncHI1A/IncHI1B(R27)':\r\n      return 'rgb(66,69,94)'\r\n    case 'Col(BS512)':\r\n      return 'rgb(251,172,246)'\r\n    case 'IncHI1A/IncHI1B(R27)':\r\n      return 'rgb(34,151,67)'\r\n    case 'IncN':\r\n      return 'rgb(238,83,190)'\r\n    case 'IncHI1B(R27)':\r\n      return 'rgb(68,242,112)'\r\n    case 'p0111':\r\n      return 'rgb(251,45,76)'\r\n    case 'IncHI1A':\r\n      return 'rgb(101,230,249)'\r\n    case 'IncI1':\r\n      return 'rgb(123,44,49)'\r\n    case 'IncY':\r\n      return 'rgb(231,173,121)'\r\n    case 'IncFIB(AP001918)':\r\n      return 'rgb(32,80,46)'\r\n    case 'IncFIB(K)':\r\n      return 'rgb(53,136,209)'\r\n    case 'IncHI2/IncHI2A':\r\n      return 'rgb(115,140,78)'\r\n    case 'Col440I':\r\n      return 'rgb(159,4,252)'\r\n    case 'Col156':\r\n      return 'rgb(244,212,3)'\r\n    case 'Col440II/Col440II':\r\n      return 'rgb(17,160,170)'\r\n    case 'IncFIA(HI1)/IncHI1A':\r\n      return 'rgb(251,120,16)'\r\n    case 'ColRNAI':\r\n      return 'rgb(91,67,11)'\r\n    case 'ColpVC':\r\n      return 'rgb(248,117,116)'\r\n    case 'IncX3':\r\n      return 'rgb(190,177,231)'\r\n    default:\r\n      return \"#F5F4F6\";\r\n  }\r\n}\r\n\r\nexport const getColorForTetracyclines = (tetA) => {\r\n  switch (tetA) {\r\n    case 'tetA(A)':\r\n      return 'rgb(174,227,154)'\r\n    case 'tetA(B)':\r\n      return '#D7AEF7'\r\n    case 'tetA(C)':\r\n      return '#FFEC78'\r\n    case 'tetA(D)':\r\n      return '#FCB469'\r\n    case 'tetA(AB)':\r\n      return 'rgb(223,207,231)'\r\n    case 'tetA(ABC)':\r\n      return 'rgb(66,69,94)'\r\n    case 'tetA(ABD)':\r\n      return 'rgb(251,172,246)'\r\n    case 'tetA(ABCD)':\r\n      return 'rgb(34,151,67)'\r\n    case 'tetA(AC)':\r\n      return 'rgb(238,83,190)'\r\n    case 'tetA(ACD)':\r\n      return 'rgb(68,242,112)'\r\n    case 'tetA(AD)':\r\n      return 'rgb(251,45,76)'\r\n    case 'tetA(BC)':\r\n      return 'rgb(101,230,249)'\r\n    case 'tetA(BD)':\r\n      return 'rgb(123,44,49)'\r\n    case 'tetA(BCD)':\r\n      return 'rgb(231,173,121)'\r\n    case 'tetA(CD)':\r\n      return 'rgb(32,80,46)'\r\n    default:\r\n      return \"#F5F4F6\";\r\n  }\r\n}","import './index.css';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { scaleLinear } from \"d3-scale\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { ComposableMap, Geographies, Geography, Sphere, Graticule, ZoomableGroup } from \"react-simple-maps\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TooltipMaterialUI from '@material-ui/core/Tooltip';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Zoom from '@material-ui/core/Zoom';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Brush, LineChart, Line, Legend } from 'recharts';\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus, faMinus, faCrosshairs, faCamera, faTable, faInfoCircle, faUndoAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport download from 'downloadjs';\r\nimport { svgAsPngUri } from 'save-svg-as-png';\r\nimport typhinetLogoImg from '../../assets/img/logo-typhinet.png';\r\nimport geography from '../../assets/world-110m.json'\r\nimport { API_ENDPOINT } from '../../constants';\r\nimport { getColorForGenotype, getColorForAMR, getColorForDrug, getColorForIncType, getColorForTetracyclines } from '../../util/colorHelper';\r\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons'\r\nimport { faGithub, faTwitter } from \"@fortawesome/free-brands-svg-icons\"\r\n// import Rodal from 'rodal';\r\nimport 'rodal/lib/rodal.css';\r\n// import ContactPage from '../contact';\r\nimport domtoimage from 'dom-to-image';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControlSelect: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n    minWidth: 120,\r\n    '& label.Mui-focused': {\r\n      color: \"rgb(31, 187, 211)\",\r\n    },\r\n    '& :not(.Mui-error).MuiInput-underline:after': {\r\n      borderBottomColor: \"rgb(31, 187, 211)\",\r\n    },\r\n  }\r\n}));\r\n\r\nconst CustomSlider = withStyles({\r\n  root: {\r\n    color: \"rgb(31, 187, 211)\"\r\n  },\r\n  thumb: {\r\n    \"&.MuiSlider-thumb\": {\r\n      \"&:not(.MuiSlider-active):focus\": {\r\n        boxShadow: \"0px 0px 0px 8px rgba(31, 187, 211, 0.16)\"\r\n      },\r\n      \"&:not(.MuiSlider-active):hover\": {\r\n        boxShadow: \"0px 0px 0px 8px rgba(31, 187, 211, 0.16)\"\r\n      },\r\n      \"&.MuiSlider-active\": {\r\n        boxShadow: \"0px 0px 0px 14px rgba(31, 187, 211, 0.16)\"\r\n      },\r\n    },\r\n  },\r\n  valueLabel: {\r\n    fontFamily: \"Montserrat\",\r\n    fontWeight: 500\r\n  }\r\n})(Slider);\r\n\r\nconst CustomCircularProgress = withStyles({\r\n  root: {\r\n    color: \"rgb(31, 187, 211)\",\r\n  }\r\n})(CircularProgress);\r\n\r\nconst CustomToggleButton = withStyles({\r\n  root: {\r\n    padding: \"2px 8px\",\r\n    fontFamily: \"Montserrat\",\r\n    fontWeight: 600\r\n  },\r\n  selected: {\r\n    backgroundColor: 'rgb(31, 187, 211) !important',\r\n    color: \"white !important\"\r\n  }\r\n})(ToggleButton);\r\n\r\nconst DashboardPage = () => {\r\n  const classes = useStyles();\r\n\r\n  const [controlMapPosition, setControlMapPosition] = useState({ coordinates: [0, 0], zoom: 1 });\r\n  const [samplesQty, setSamplesQty] = useState(0);\r\n\r\n  const [worldMapSamplesData, setWorldMapSamplesData] = useState([]);\r\n  const [worldMapComplementaryData, setWorldMapComplementaryData] = useState({});\r\n  const [worldMapGenotypesData, setWorldMapGenotypesData] = useState([]);\r\n  const [worldMapH58Data, setWorldMapH58Data] = useState([]);\r\n  const [worldMapMDRData, setWorldMapMDRData] = useState([]);\r\n  const [worldMapXDRData, setWorldMapXDRData] = useState([]);\r\n  const [worldMapDCSData, setWorldMapDCSData] = useState([]);\r\n  const [worldMapAZITHData, setWorldMapAZITHData] = useState([]);\r\n  const [worldMapCIPIData, setWorldMapCIPIData] = useState([]);\r\n  const [worldMapCIPRData, setWorldMapCIPRData] = useState([]);\r\n  const [worldMapDrugsData, setWorldMapDrugsData] = useState([]);\r\n  const [worldMapAmrProfilesData, setWorldMapAmrProfilesData] = useState([]);\r\n  const [worldMapPlasmidIncompatibilityTypeData, setWorldMapPlasmidIncompatibilityTypeData] = useState([]);\r\n\r\n  const [plotAmrClassChart, setPlotAmrClassChart] = useState(function () { })\r\n  const [plotDrugsAndGenotypesChart, setPlotDrugsAndGenotypesChart] = useState(function () { })\r\n  const [plotPopulationStructureChart, setPlotPopulationStructureChart] = useState(function () { })\r\n  const [plotDrugTrendsChart, setPlotDrugTrendsChart] = useState(function () { })\r\n\r\n  const [captureControlMapInProgress, setCaptureControlMapInProgress] = useState(false)\r\n  const [captureControlChartRFWGInProgress, setCaptureControlChartRFWGInProgress] = useState(false)\r\n  const [captureControlChartDRTInProgress, setCaptureControlChartDRTInProgress] = useState(false)\r\n  const [captureControlChartGDInProgress, setCaptureControlChartGDInProgress] = useState(false)\r\n  const [captureControlChartRFWAGInProgress, setCaptureControlChartRFWAGInProgress] = useState(false)\r\n\r\n  const [tooltipContent, setTooltipContent] = useState(null);\r\n\r\n  const [allCountries, setAllCountries] = useState([]);\r\n\r\n  const [timePeriodRange, setTimePeriodRange] = React.useState([1905, 2019]);\r\n  const [actualTimePeriodRange, setActualTimePeriodRange] = React.useState([1905, 2019]);\r\n  const [countriesForFilter, setCountriesForFilter] = React.useState(['All']);\r\n  const [actualCountry, setActualCountry] = useState(\"All\");\r\n  const [populationStructureFilter, setPopulationStructureFilter] = React.useState(1);\r\n  const [amrClassesForFilter] = useState([/*\"AMR Profiles\", */\"Ampicillin\", \"Azithromycin\", \"Chloramphenicol\", \"Co-trimoxazole\", \"ESBL\", \"Fluoroquinolones (DCS)\", \"Sulphonamides\", \"Tetracyclines\", \"Trimethoprim\"])\r\n  const [amrClassFilter, setAmrClassFilter] = React.useState(amrClassesForFilter[5])\r\n\r\n  const [drugTrendsChartData, setDrugTrendsChartData] = useState([])\r\n  const [drugsAndGenotypesChartData, setDrugsAndGenotypesChartData] = useState([])\r\n  const [chartMaxHeight, setChartMaxHeight] = useState(0)\r\n  const [chartMaxWidth, setChartMaxWidth] = useState(0)\r\n  const [populationStructureChartData, setPopulationStructureChartData] = useState([])\r\n  const [amrClassChartData, setAmrClassChartData] = useState([])\r\n\r\n  const [mapView, setMapView] = React.useState('CipI');\r\n  const [dataset, setDataset] = React.useState('full');\r\n  const [totalGenomes, setTotalGenomes] = useState([])\r\n  const [actualGenomes, setActualGenomes] = useState([])\r\n  const [totalGenotypes, setTotalGenotypes] = useState([])\r\n  const [actualGenotypes, setActualGenotypes] = useState([])\r\n  const [appLoading, setAppLoading] = useState(0)\r\n\r\n  const [allGenotypes, setAllGenotypes] = useState({})\r\n\r\n  // const [contactModalVisible, setContactModalVisible] = useState(false)\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  // const [dimensions.width > desktop, setdimensions.width > desktop] = useState(window.innerWidth > 767)\r\n  const [desktop] = useState(767)\r\n  const [mobile] = useState(500)\r\n  const [middle] = useState(1300)\r\n\r\n  const [dimensions, setDimensions] = React.useState({\r\n    height: window.innerHeight,\r\n    width: window.innerWidth\r\n  })\r\n\r\n  function debounce(fn, ms) {\r\n    let timer\r\n    return _ => {\r\n      clearTimeout(timer)\r\n      timer = setTimeout(_ => {\r\n        timer = null\r\n        fn.apply(this, arguments)\r\n      }, ms)\r\n    };\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (appLoading === 0) {\r\n      document.getElementsByClassName('App')[0].style.overflow = 'hidden'\r\n    } else if (appLoading === 2) {\r\n      document.getElementsByClassName('App')[0].style.overflow = 'visible'\r\n      document.getElementsByClassName('loading')[0].remove()\r\n    }\r\n  }, [appLoading])\r\n\r\n  // useEffect(() => {\r\n  //   const timeOutId = setTimeout(() => {\r\n  //     setAppLoading(false)\r\n  //   }, 8000)\r\n  //   return () => clearTimeout(timeOutId);\r\n  // }, [appLoading])\r\n\r\n  useEffect(() => {\r\n    const debouncedHandleResize = debounce(function handleResize() {\r\n      setDimensions({\r\n        height: window.innerHeight,\r\n        width: window.innerWidth\r\n      })\r\n    }, 1000)\r\n\r\n    window.addEventListener('resize', debouncedHandleResize)\r\n\r\n    return _ => {\r\n      window.removeEventListener('resize', debouncedHandleResize)\r\n    }\r\n  })\r\n\r\n  const [genotypes] = useState([\r\n    '0.0.1', '0.0.2', '0.0.3', '0.1',\r\n    '0.1.1', '0.1.2', '0.1.3', '1.1.1',\r\n    '1.1.2', '1.1.3', '1.2', '1.2.1',\r\n    '2', '2.0.1', '2.0.2', '2.1',\r\n    '2.1.1', '2.1.3', '2.1.5', '2.1.6',\r\n    '2.1.7', '2.1.8', '2.1.9', '2.2',\r\n    '2.2.1', '2.2.2', '2.2.3', '2.2.4',\r\n    '2.3.1', '2.3.2', '2.3.3', '2.3.4',\r\n    '2.3.5', '2.4', '2.4.1', '2.5',\r\n    '2.5.1', '3', '3.0.1', '3.0.2',\r\n    '3.1', '3.1.1', '3.1.2', '3.2',\r\n    '3.2.1', '3.2.2', '3.3', '3.3.1',\r\n    '3.3.2', '3.3.2.Bd1', '3.3.2.Bd2', '3.4',\r\n    '3.5', '3.5.1', '3.5.2', '3.5.3',\r\n    '3.5.4', '4.1', '4.2', '4.2.1',\r\n    '4.2.2', '4.2.3', '4.3.1', '4.3.1.1',\r\n    '4.3.1.1.P1', '4.3.1.1.EA1', '4.3.1.2', '4.3.1.2.EA2',\r\n    '4.3.1.2.EA3', '4.3.1.3', '4.3.1.3.Bdq'].sort((a, b) => a.localeCompare(b)));\r\n\r\n  useEffect(() => {\r\n    axios.get(`${API_ENDPOINT}filters/getYearLimits`)\r\n      .then((res) => {\r\n        let limits = res.data\r\n        setTimePeriodRange([limits.min, limits.max])\r\n        setActualTimePeriodRange([limits.min, limits.max])\r\n        setAllCountries(limits.countries)\r\n        setAllGenotypes(limits.allGenotypes)\r\n        setTotalGenotypes(limits.totalGenotypes)\r\n        setAppLoading((value) => value + 1)\r\n      })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const timeOutId = setTimeout(() => {\r\n      axios.get(`${API_ENDPOINT}filters/all/${actualTimePeriodRange[0]}/${actualTimePeriodRange[1]}/${dataset}`)\r\n        .then((res) => {\r\n          var response = res.data\r\n\r\n          response['Dem. Rep. Congo'] = response['Democratic Republic of Congo']\r\n          delete response['Democratic Republic of Congo']\r\n          response['Central African Rep.'] = response['Central African Republic']\r\n          delete response['Central African Republic']\r\n          response[\"Côte d'Ivoire\"] = response['Ivory Coast']\r\n          delete response['Ivory Coast']\r\n          response[\"Timor-Leste\"] = response['East Timor']\r\n          delete response['East Timor']\r\n\r\n          setWorldMapComplementaryData(response)\r\n        })\r\n    }, 500)\r\n    return () => clearTimeout(timeOutId);\r\n  }, [actualTimePeriodRange, dataset])\r\n\r\n  useEffect(() => {\r\n    const parseDataForGenotypeChart = (data) => {\r\n      var finalPopulationStructureChartData = [];\r\n\r\n      var genomes = data;\r\n      var genotypes = [];\r\n\r\n      data.forEach((entry) => {\r\n        if (!genotypes.some(g => g === entry.GENOTYPE)) {\r\n          genotypes.push(entry.GENOTYPE)\r\n        }\r\n\r\n        /* POPULATION STRUCTURE CHART GENERATION */\r\n        if (populationStructureFilter === 1) { /* Genotype */\r\n          if (!finalPopulationStructureChartData.some(e => e.name === entry.YEAR)) {\r\n            finalPopulationStructureChartData.push({\r\n              name: entry.YEAR,\r\n              [entry.GENOTYPE]: 1\r\n            })\r\n          } else {\r\n            let year = finalPopulationStructureChartData.find(e => e.name === entry.YEAR);\r\n            let yearIndex = finalPopulationStructureChartData.findIndex(e => e.name === entry.YEAR);\r\n\r\n            if (year[entry.GENOTYPE] === undefined) {\r\n              year[entry.GENOTYPE] = 1\r\n            } else {\r\n              year[entry.GENOTYPE] = year[entry.GENOTYPE] + 1\r\n            }\r\n            finalPopulationStructureChartData[yearIndex] = year;\r\n          }\r\n        } else { /* H58 / Non-H58 */\r\n          if (entry['GENOTYPE_SIMPLE'] === 'H58' || entry['GENOTYPE_SIMPLE'] === 'Non-H58')\r\n            if (!finalPopulationStructureChartData.some(e => e.name === entry['GENOTYPE_SIMPLE'])) {\r\n              finalPopulationStructureChartData.push({\r\n                name: entry['GENOTYPE_SIMPLE'],\r\n                [entry.GENOTYPE]: 1\r\n              })\r\n            } else {\r\n              let genotypeSimple = finalPopulationStructureChartData.find(e => e.name === entry['GENOTYPE_SIMPLE']);\r\n              let genotypeSimpleIndex = finalPopulationStructureChartData.findIndex(e => e.name === entry['GENOTYPE_SIMPLE']);\r\n\r\n              if (genotypeSimple[entry.GENOTYPE] === undefined) {\r\n                genotypeSimple[entry.GENOTYPE] = 1\r\n              } else {\r\n                genotypeSimple[entry.GENOTYPE] = genotypeSimple[entry.GENOTYPE] + 1\r\n              }\r\n              finalPopulationStructureChartData[genotypeSimpleIndex] = genotypeSimple;\r\n            }\r\n        }\r\n      })\r\n\r\n      if (totalGenomes.length === 0)\r\n        setTotalGenomes(genomes)\r\n\r\n      setActualGenomes(genomes)\r\n      setActualGenotypes(genotypes)\r\n\r\n      finalPopulationStructureChartData.forEach((data) => {\r\n        let sum = 0;\r\n        Object.entries(data).forEach((entry) => {\r\n          if (entry[0] !== \"name\")\r\n            sum += entry[1];\r\n        })\r\n        data.total = sum;\r\n      })\r\n\r\n      if (!arraysEqual(finalPopulationStructureChartData, populationStructureChartData))\r\n        setPopulationStructureChartData(finalPopulationStructureChartData)\r\n\r\n      let populationStructureChartSums = []\r\n      finalPopulationStructureChartData.forEach((year) => {\r\n        let sum = 0\r\n        let yearArray = Object.entries(year)\r\n        yearArray.forEach((_year) => {\r\n          if (_year[0] !== \"name\" && _year[0] !== \"total\")\r\n            sum += _year[1]\r\n        })\r\n        populationStructureChartSums.push({\r\n          year: year.name,\r\n          sum\r\n        })\r\n      })\r\n\r\n      if (populationStructureChartSums.length > 0) {\r\n        let highestSum = populationStructureChartSums.sort((a, b) => b.sum - a.sum)[0].sum;\r\n\r\n        if (populationStructureFilter === 1) {\r\n          if (highestSum > chartMaxHeight)\r\n            setChartMaxHeight(Math.ceil(highestSum / 100) * 100)\r\n        } else {\r\n          if (highestSum > chartMaxWidth)\r\n            setChartMaxWidth(Math.ceil(highestSum / 100) * 100)\r\n        }\r\n      }\r\n    }\r\n\r\n    const parseDataForCountryMap = (data) => {\r\n      let finalCountries = [];\r\n\r\n      let samplesData = [], genotypesData = [], h58Data = [], mdrData = [], xdrData = [], drugsData = [], amrData = [], incTypesData = [], dcsData = [], azithData = [], cipIData = [], cipRData = [];\r\n\r\n      const countData = (array, elementToCount, parentName, childName) => {\r\n        let temp = []\r\n        array.forEach(entry => {\r\n          if (!temp.some(e => e.name === entry['COUNTRY_ONLY'])) {\r\n            temp.push({\r\n              name: entry['COUNTRY_ONLY'],\r\n              displayName: entry['COUNTRY_ONLY'],\r\n              total: 1,\r\n              [parentName]: [{\r\n                [childName]: entry[elementToCount],\r\n                count: 1\r\n              }]\r\n            })\r\n          } else {\r\n            let country = temp.find(e => e.name === entry['COUNTRY_ONLY']);\r\n            let countryIndex = temp.findIndex(e => e.name === entry['COUNTRY_ONLY']);\r\n\r\n            if (!country[parentName].some(e => e[childName] === entry[elementToCount])) {\r\n              country[parentName].push({\r\n                [childName]: entry[elementToCount],\r\n                count: 1\r\n              })\r\n            } else {\r\n              let parent = country[parentName].find(e => e[childName] === entry[elementToCount]);\r\n              let index = country[parentName].findIndex(e => e[childName] === entry[elementToCount]);\r\n              parent.count = parent.count + 1\r\n              country[parentName][index] = parent\r\n            }\r\n            country.total = country.total + 1\r\n\r\n            temp[countryIndex] = country;\r\n          }\r\n        })\r\n\r\n        let congoCountryIndex = temp.findIndex(e => e.name === 'Democratic Republic of Congo');\r\n        if (congoCountryIndex !== -1)\r\n          temp[congoCountryIndex].displayName = 'Dem. Rep. Congo'\r\n\r\n        let centralAfricanRepublicCountryIndex = temp.findIndex(e => e.name === 'Central African Republic');\r\n        if (centralAfricanRepublicCountryIndex !== -1)\r\n          temp[centralAfricanRepublicCountryIndex].displayName = 'Central African Rep.'\r\n\r\n        let ivoryCoastCountryIndex = temp.findIndex(e => e.name === \"Ivory Coast\");\r\n        if (ivoryCoastCountryIndex !== -1)\r\n          temp[ivoryCoastCountryIndex].displayName = \"Côte d'Ivoire\"\r\n\r\n        let timorLesteCountryIndex = temp.findIndex(e => e.name === \"East Timor\");\r\n        if (timorLesteCountryIndex !== -1)\r\n          temp[timorLesteCountryIndex].displayName = \"Timor-Leste\"\r\n\r\n        temp.forEach((country) => {\r\n          country[parentName].sort((a, b) => b.count - a.count);\r\n        })\r\n        temp.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n        return temp\r\n      }\r\n\r\n      data.forEach((entry) => {\r\n        if (!finalCountries.some(e => e === entry['COUNTRY_ONLY']) && entry['COUNTRY_ONLY'] !== \"-\" && entry['COUNTRY_ONLY'] !== \"\")\r\n          finalCountries.push(entry['COUNTRY_ONLY'])\r\n\r\n        if (!samplesData.some(e => e.name === entry['COUNTRY_ONLY'])) {\r\n          samplesData.push({\r\n            name: entry['COUNTRY_ONLY'],\r\n            displayName: entry['COUNTRY_ONLY'],\r\n            count: 1\r\n          })\r\n        } else {\r\n          let country = samplesData.find(e => e.name === entry['COUNTRY_ONLY']);\r\n          let countryIndex = samplesData.findIndex(e => e.name === entry['COUNTRY_ONLY']);\r\n          country.count = country.count + 1\r\n          samplesData[countryIndex] = country;\r\n        }\r\n      })\r\n\r\n      if (!arraysEqual(samplesData, worldMapSamplesData)) {\r\n        let congoCountryIndex = samplesData.findIndex(e => e.name === 'Democratic Republic of Congo');\r\n        if (congoCountryIndex !== -1)\r\n          samplesData[congoCountryIndex].displayName = 'Dem. Rep. Congo'\r\n\r\n        let centralAfricanRepublicCountryIndex = samplesData.findIndex(e => e.name === 'Central African Republic');\r\n        if (centralAfricanRepublicCountryIndex !== -1)\r\n          samplesData[centralAfricanRepublicCountryIndex].displayName = 'Central African Rep.'\r\n\r\n        let ivoryCoastCountryIndex = samplesData.findIndex(e => e.name === \"Ivory Coast\");\r\n        if (ivoryCoastCountryIndex !== -1)\r\n          samplesData[ivoryCoastCountryIndex].displayName = \"Côte d'Ivoire\"\r\n\r\n        let timorLesteCountryIndex = samplesData.findIndex(e => e.name === \"East Timor\");\r\n        if (timorLesteCountryIndex !== -1)\r\n          samplesData[timorLesteCountryIndex].displayName = \"Timor-Leste\"\r\n\r\n        setWorldMapSamplesData(samplesData)\r\n        setSamplesQty(\r\n          Math.ceil((\r\n            samplesData.length > 0 ? samplesData.sort((a, b) => b.count - a.count)[0].count : 0\r\n          ) / 50) * 50\r\n        )\r\n      }\r\n\r\n      finalCountries.sort((a, b) => a.localeCompare(b));\r\n      finalCountries.unshift(\"All\");\r\n      setCountriesForFilter(finalCountries)\r\n\r\n      if (!finalCountries.includes(actualCountry))\r\n        setActualCountry(\"All\")\r\n\r\n      genotypesData = countData(data, \"GENOTYPE\", \"genotypes\", \"lineage\")\r\n      if (!arraysEqual(genotypesData, worldMapGenotypesData))\r\n        setWorldMapGenotypesData(genotypesData)\r\n\r\n      h58Data = countData(data, \"GENOTYPE_SIMPLE\", \"genotypes\", \"type\")\r\n      h58Data.forEach(country => {\r\n        country.genotypes.forEach((g, index) => {\r\n          let percentage = ((g.count / country.total) * 100)\r\n          if (Math.round(percentage) !== percentage) {\r\n            percentage = percentage.toFixed(2)\r\n          }\r\n          g.percentage = percentage\r\n        })\r\n      })\r\n      if (!arraysEqual(h58Data, worldMapH58Data))\r\n        setWorldMapH58Data(h58Data)\r\n\r\n      mdrData = countData(data, \"MDR\", \"MDRs\", \"type\")\r\n      mdrData.forEach(country => {\r\n        country.MDRs.forEach((mdr, index) => {\r\n          if (mdr.type === \"MDR\") {\r\n            let percentage = ((mdr.count / country.total) * 100)\r\n            if (Math.round(percentage) !== percentage)\r\n              percentage = percentage.toFixed(2)\r\n            percentage = parseFloat(percentage);\r\n            country.percentage = percentage;\r\n            country.count = mdr.count;\r\n          }\r\n        })\r\n        if (country.percentage === undefined) {\r\n          country.percentage = parseFloat(0)\r\n        }\r\n        if (country.count === undefined) {\r\n          country.count = 0\r\n        }\r\n      })\r\n      if (!arraysEqual(mdrData, worldMapMDRData))\r\n        setWorldMapMDRData(mdrData)\r\n\r\n      xdrData = countData(data, \"XDR\", \"XDRs\", \"type\")\r\n      xdrData.forEach(country => {\r\n        country.XDRs.forEach((xdr, index) => {\r\n          if (xdr.type === \"XDR\") {\r\n            let percentage = ((xdr.count / country.total) * 100)\r\n            if (Math.round(percentage) !== percentage)\r\n              percentage = percentage.toFixed(2)\r\n            percentage = parseFloat(percentage);\r\n            country.percentage = percentage;\r\n            country.count = xdr.count;\r\n          }\r\n          if (country.percentage === undefined) {\r\n            country.percentage = parseFloat(0)\r\n          }\r\n          if (country.count === undefined) {\r\n            country.count = 0\r\n          }\r\n        })\r\n      })\r\n      if (!arraysEqual(xdrData, worldMapXDRData))\r\n        setWorldMapXDRData(xdrData)\r\n\r\n      dcsData = countData(data, \"DCS\", \"DCSs\", \"type\")\r\n      dcsData.forEach(country => {\r\n        country.DCSs.forEach((dcs, index) => {\r\n          if (dcs.type === \"DCS\") {\r\n            let percentage = ((dcs.count / country.total) * 100)\r\n            if (Math.round(percentage) !== percentage)\r\n              percentage = percentage.toFixed(2)\r\n            percentage = parseFloat(percentage);\r\n            country.percentage = percentage;\r\n            country.count = dcs.count;\r\n          }\r\n          if (country.percentage === undefined) {\r\n            country.percentage = parseFloat(0)\r\n          }\r\n          if (country.count === undefined) {\r\n            country.count = 0\r\n          }\r\n        })\r\n      })\r\n      if (!arraysEqual(dcsData, worldMapDCSData))\r\n        setWorldMapDCSData(dcsData)\r\n\r\n      azithData = countData(data, \"Azith\", \"AZs\", \"type\")\r\n      azithData.forEach(country => {\r\n        country.AZs.forEach((az, index) => {\r\n          if (az.type === \"AzithR\") {\r\n            let percentage = ((az.count / country.total) * 100)\r\n            if (Math.round(percentage) !== percentage)\r\n              percentage = percentage.toFixed(2)\r\n            percentage = parseFloat(percentage);\r\n            country.percentage = percentage;\r\n            country.count = az.count;\r\n          }\r\n          if (country.percentage === undefined) {\r\n            country.percentage = parseFloat(0)\r\n          }\r\n          if (country.count === undefined) {\r\n            country.count = 0\r\n          }\r\n        })\r\n      })\r\n      if (!arraysEqual(azithData, worldMapAZITHData))\r\n        setWorldMapAZITHData(azithData)\r\n\r\n      cipIData = countData(data, \"CipI\", \"CipIs\", \"type\")\r\n      cipIData.forEach(country => {\r\n        country.CipIs.forEach((cipIs, index) => {\r\n          if (cipIs.type === \"CipI\") {\r\n            let percentage = ((cipIs.count / country.total) * 100)\r\n            if (Math.round(percentage) !== percentage)\r\n              percentage = percentage.toFixed(2)\r\n            percentage = parseFloat(percentage);\r\n            country.percentage = percentage;\r\n            country.count = cipIs.count;\r\n          }\r\n          if (country.percentage === undefined) {\r\n            country.percentage = parseFloat(0)\r\n          }\r\n          if (country.count === undefined) {\r\n            country.count = 0\r\n          }\r\n        })\r\n      })\r\n      if (!arraysEqual(cipIData, worldMapCIPIData))\r\n        setWorldMapCIPIData(cipIData)\r\n\r\n      cipRData = countData(data, \"CipR\", \"CipRs\", \"type\")\r\n      cipRData.forEach(country => {\r\n        country.CipRs.forEach((cipRs, index) => {\r\n          if (cipRs.type === \"CipR\") {\r\n            let percentage = ((cipRs.count / country.total) * 100)\r\n            if (Math.round(percentage) !== percentage)\r\n              percentage = percentage.toFixed(2)\r\n            percentage = parseFloat(percentage);\r\n            country.percentage = percentage;\r\n            country.count = cipRs.count;\r\n          }\r\n          if (country.percentage === undefined) {\r\n            country.percentage = parseFloat(0)\r\n          }\r\n          if (country.count === undefined) {\r\n            country.count = 0\r\n          }\r\n        })\r\n      })\r\n      if (!arraysEqual(cipRData, worldMapCIPRData))\r\n        setWorldMapCIPRData(cipRData)\r\n\r\n      let dataForCountingDrugs = []\r\n      data.forEach(entry => {\r\n        entry.DRUGS.forEach(drug => {\r\n          dataForCountingDrugs.push({\r\n            ...entry,\r\n            DRUG: drug,\r\n          })\r\n        })\r\n      })\r\n      drugsData = countData(dataForCountingDrugs, \"DRUG\", \"drugs\", \"name\");\r\n      if (!arraysEqual(drugsData, worldMapDrugsData))\r\n        setWorldMapDrugsData(drugsData)\r\n\r\n      amrData = countData(data, \"AMR\", \"amrProfiles\", \"name\")\r\n      if (!arraysEqual(amrData, worldMapAmrProfilesData))\r\n        setWorldMapAmrProfilesData(amrData)\r\n\r\n      incTypesData = countData(data, \"IncTypes\", \"incTypes\", \"type\")\r\n      incTypesData.forEach(country => {\r\n        country.incTypes = country.incTypes.filter(g => g.type !== \"\")\r\n      })\r\n      if (!arraysEqual(incTypesData, worldMapPlasmidIncompatibilityTypeData))\r\n        setWorldMapPlasmidIncompatibilityTypeData(incTypesData)\r\n    }\r\n\r\n    const parseDataForAmrClassChart = (data) => {\r\n      let finalChartData = []\r\n      let maxSum = 0\r\n      let totalSum = {}\r\n      data.forEach((entry) => {\r\n        if (!finalChartData.some(e => e.genotype === entry.GENOTYPE)) {\r\n          finalChartData.push({\r\n            genotype: entry.GENOTYPE,\r\n            [entry.GENE]: 1\r\n          })\r\n        } else {\r\n          let genotype = finalChartData.find(e => e.genotype === entry.GENOTYPE);\r\n          let genotypeIndex = finalChartData.findIndex(e => e.genotype === entry.GENOTYPE);\r\n\r\n          if (genotype[entry.GENE] === undefined) {\r\n            genotype[entry.GENE] = 1\r\n          } else {\r\n            genotype[entry.GENE] = genotype[entry.GENE] + 1\r\n          }\r\n          finalChartData[genotypeIndex] = genotype;\r\n        }\r\n        if (entry.GENOTYPE !== \"\") {\r\n          if (!(entry.GENE in totalSum)) {\r\n            totalSum[entry.GENE] = 1\r\n          } else {\r\n            totalSum[entry.GENE] = totalSum[entry.GENE] + 1\r\n          }\r\n        }\r\n      })\r\n      delete totalSum[\"\"]\r\n\r\n      finalChartData.sort((a, b) => a.genotype.localeCompare(b.genotype));\r\n      finalChartData.forEach((data) => {\r\n        let sum = 0;\r\n        Object.entries(data).forEach((entry) => {\r\n          if (entry[0] !== \"genotype\" && entry[0] !== \"undefined\") {\r\n            let errorMargin = Math.ceil(entry[1] * 0.2) // 20%\r\n            let lowerValue = errorMargin > entry[1] ? entry[1] : errorMargin;\r\n\r\n            if (entry[1] === 1)\r\n              lowerValue = 1\r\n\r\n            if (entry[1] === 0)\r\n              lowerValue = 0\r\n\r\n            data[`error-${entry[0]}`] = [lowerValue, errorMargin]\r\n\r\n            sum += entry[1];\r\n            if (entry[1] > maxSum) {\r\n              maxSum = entry[1]\r\n            }\r\n          }\r\n          if (entry[0] === \"genotype\") {\r\n            data.total2 = allGenotypes[entry[1].toString()];\r\n          }\r\n        })\r\n        data.total = sum;\r\n      })\r\n      finalChartData = finalChartData.filter(g => g.genotype !== undefined && g.genotype !== \"0\")\r\n      let top10 = []\r\n      finalChartData.forEach(element => {\r\n        if (top10.length < 10) {\r\n          top10.push(element)\r\n        } else {\r\n          top10.sort(function (a, b) {\r\n            if (a.total === b.total && a.genotype > b.genotype)\r\n              return -1\r\n            return a.total > b.total ? -1 : 1\r\n          })\r\n          if (element.total === top10[9].total) {\r\n            if (element.genotype > top10[9].genotype) {\r\n              top10[9] = element\r\n            }\r\n          }\r\n          if (element.total > top10[9].total) {\r\n            top10[9] = element\r\n          }\r\n        }\r\n      })\r\n\r\n      top10.sort(function (a, b) {\r\n        if (a.total === b.total && a.genotype > b.genotype)\r\n          return -1\r\n        return a.total > b.total ? -1 : 1\r\n      })\r\n      top10.push({ maxSum: top10.length === 0 ? 0 : Math.ceil(top10[0].total / 50) * 50, totalSum: totalSum })\r\n      if (amrClassFilter !== \"Co-trimoxazole\") {\r\n        if (!arraysEqual(amrClassChartData, top10))\r\n          setAmrClassChartData(top10)\r\n      } else {\r\n        if (!arraysEqual(amrClassChartData, top10))\r\n          setAmrClassChartData(top10)\r\n      }\r\n    }\r\n\r\n    const parseDataForDrugTrendsChart = (data) => {\r\n      let finalDrugTrendsChartData = []\r\n      let finalDrugsAndGenotypesChartData = []\r\n      let totalSum = {}\r\n      let allDrugs = data[data.length - 1][0]\r\n      data = data.slice(0, data.length - 1)\r\n\r\n      data.forEach((entry) => {\r\n        if (!finalDrugTrendsChartData.some(e => e.name === entry.YEAR)) {\r\n          finalDrugTrendsChartData.push({\r\n            name: entry.YEAR,\r\n            [entry.DRUG]: 1\r\n          })\r\n        } else {\r\n          let year = finalDrugTrendsChartData.find(e => e.name === entry.YEAR);\r\n          let yearIndex = finalDrugTrendsChartData.findIndex(e => e.name === entry.YEAR);\r\n\r\n          if (year[entry.DRUG] === undefined) {\r\n            year[entry.DRUG] = 1\r\n          } else {\r\n            year[entry.DRUG] = year[entry.DRUG] + 1\r\n          }\r\n          finalDrugTrendsChartData[yearIndex] = year;\r\n        }\r\n\r\n        if (!finalDrugsAndGenotypesChartData.some(e => e.name === entry.GENOTYPE)) {\r\n          finalDrugsAndGenotypesChartData.push({\r\n            name: entry.GENOTYPE,\r\n            [entry.DRUG]: 1\r\n          })\r\n        } else {\r\n          let genotype = finalDrugsAndGenotypesChartData.find(e => e.name === entry.GENOTYPE);\r\n          let genotypeIndex = finalDrugsAndGenotypesChartData.findIndex(e => e.name === entry.GENOTYPE);\r\n\r\n          if (genotype[entry.DRUG] === undefined) {\r\n            genotype[entry.DRUG] = 1\r\n          } else {\r\n            genotype[entry.DRUG] = genotype[entry.DRUG] + 1\r\n          }\r\n          finalDrugsAndGenotypesChartData[genotypeIndex] = genotype;\r\n        }\r\n\r\n        if (!(entry.GENOTYPE in totalSum)) {\r\n          totalSum[entry.GENOTYPE] = 1\r\n        } else {\r\n          totalSum[entry.GENOTYPE] = totalSum[entry.GENOTYPE] + 1\r\n        }\r\n      })\r\n      finalDrugTrendsChartData.forEach((data) => {\r\n        data.total = allDrugs[data[\"name\"]];\r\n        let maxValue = 0;\r\n        const drugsPercentage = {}\r\n        for (const key in data) {\r\n          if (key !== 'name' && key !== 'total') {\r\n            if (data[key] > maxValue) {\r\n              maxValue = data[key]\r\n            }\r\n            const aux = Math.round((data[key] * 100) / data.total)\r\n            drugsPercentage[key] = data[key]\r\n            data[key] = aux\r\n          }\r\n        }\r\n        data.higherPercentage = Math.round((maxValue * 100) / data.total)\r\n        data.drugsPercentage = drugsPercentage\r\n      })\r\n\r\n      finalDrugsAndGenotypesChartData.forEach((data) => {\r\n        Object.entries(data).forEach((entry) => {\r\n          if (entry[0] === \"name\")\r\n            data.total = allGenotypes[entry[1]]\r\n        })\r\n      })\r\n\r\n      finalDrugTrendsChartData.sort((a, b) => a.name.localeCompare(b.name))\r\n      finalDrugTrendsChartData.push({ totalSum: allDrugs })\r\n\r\n      finalDrugsAndGenotypesChartData.sort((a, b) => b.total - a.total)\r\n      finalDrugsAndGenotypesChartData = finalDrugsAndGenotypesChartData.slice(0, finalDrugsAndGenotypesChartData.length >= 5 ? 5 : finalDrugsAndGenotypesChartData.length)\r\n      finalDrugsAndGenotypesChartData.push({ totalSum: totalSum })\r\n\r\n      if (!arraysEqual(finalDrugTrendsChartData, drugTrendsChartData))\r\n        setDrugTrendsChartData(finalDrugTrendsChartData)\r\n      if (!arraysEqual(finalDrugsAndGenotypesChartData, drugsAndGenotypesChartData)) {\r\n        setDrugsAndGenotypesChartData(finalDrugsAndGenotypesChartData)\r\n      }\r\n    }\r\n\r\n    const timeOutId = setTimeout(async () => {\r\n      let filter;\r\n\r\n      if (populationStructureFilter === 1) {\r\n        filter = 2\r\n      } else {\r\n        filter = 3 /* H58 and Non-H58 */\r\n      }\r\n\r\n      let genotypeChartResponse = await axios.get(`${API_ENDPOINT}filters/${filter}/${actualCountry === \"All\" ? \"all\" : actualCountry}/${actualTimePeriodRange[0]}/${actualTimePeriodRange[1]}/${dataset}`)\r\n      parseDataForGenotypeChart(genotypeChartResponse.data)\r\n\r\n      if (actualCountry === \"All\") {\r\n        parseDataForCountryMap(genotypeChartResponse.data)\r\n      }\r\n      else {\r\n        let response = await axios.get(`${API_ENDPOINT}filters/${filter}/all/${actualTimePeriodRange[0]}/${actualTimePeriodRange[1]}/${dataset}`)\r\n        parseDataForCountryMap(response.data)\r\n      }\r\n\r\n      let drugTrendsChartResponse = await axios.get(`${API_ENDPOINT}filters/drugTrendsChart/${actualCountry === \"All\" ? \"all\" : actualCountry}/${actualTimePeriodRange[0]}/${actualTimePeriodRange[1]}/${dataset}`)\r\n      parseDataForDrugTrendsChart(drugTrendsChartResponse.data)\r\n\r\n      let classChartResponse = await axios.get(`${API_ENDPOINT}filters/amrClassChart/${actualCountry === \"All\" ? \"all\" : actualCountry}/${actualTimePeriodRange[0]}/${actualTimePeriodRange[1]}/${amrClassFilter}/${dataset}`)\r\n      parseDataForAmrClassChart(classChartResponse.data)\r\n\r\n      setAppLoading((value) => { if (value < 2) return value + 1 })\r\n\r\n    }, 500);\r\n    return () => clearTimeout(timeOutId);\r\n  }, [populationStructureFilter, actualTimePeriodRange, actualCountry, dataset, amrClassFilter, allGenotypes]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  function arraysEqual(a1, a2) {\r\n    return JSON.stringify(a1) === JSON.stringify(a2);\r\n  }\r\n\r\n  const mapSamplesColorScale = scaleLinear()\r\n    .domain([1, samplesQty / 5, 2 * (samplesQty / 5), 3 * (samplesQty / 5), 4 * (samplesQty / 5), samplesQty])\r\n    .range([\"#4575b4\", \"#91bfdb\", \"#e0f3f8\", \"#fee090\", \"#fc8d59\", \"#d73027\"]);\r\n\r\n  const [mapRedColorScale] = useState(() => scaleLinear()\r\n    .domain([0, 50, 100])\r\n    .range([\"#ffebee\", \"#f44336\", \"#b71c1c\"]));\r\n\r\n  const tooltip = React.useCallback((positionY, width1, width2, sort, wrapperS, stroke, chart = -1) => {\r\n    return (\r\n      <Tooltip\r\n        position={{ y: positionY, x: dimensions.width < mobile ? -20 : 0 }}\r\n        wrapperStyle={wrapperS}\r\n        content={({ active, payload, label }) => {\r\n          if (payload !== null) {\r\n            if (sort) {\r\n              payload.sort((a, b) => b.value - a.value)\r\n              payload = payload.reverse()\r\n            }\r\n            if (active) {\r\n              return (\r\n                <div style={{ backgroundColor: \"rgba(255,255,255,1)\", border: \"solid rgba(0,0,0,0.25) 1px\", padding: 16, display: \"flex\", flexDirection: \"column\" }}>\r\n                  <span style={{ fontFamily: \"Montserrat\", fontWeight: 600, fontSize: 24 }}>{label}</span>\r\n                  <div style={{ height: 14 }} />\r\n                  <div style={{ display: \"flex\", flexWrap: \"wrap\", width: width1, flexDirection: \"\" }}>\r\n                    {payload.reverse().map((item, index) => {\r\n                      let percentage = ((item.value / item.payload.total) * 100)\r\n                      // if (chart === 0) {\r\n                      //   percentage = ((item.value / drugsAndGenotypesChartData[drugsAndGenotypesChartData.length - 1].totalSum[item.name]) * 100)\r\n                      // } else \r\n                      if (chart === 1) {\r\n                        percentage = ((item.payload.drugsPercentage[item.dataKey] / item.payload.total) * 100)\r\n                      }\r\n                      // if (Math.round(percentage) !== percentage)\r\n                      //   percentage = percentage.toFixed(2)\r\n                      percentage = Math.round(percentage)\r\n                      return (\r\n                        <div key={index + item} style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\", width: width2, marginBottom: 8 }}>\r\n                          <div style={{ backgroundColor: stroke ? item.stroke : item.fill, height: 18, width: 18, border: \"solid rgb(0,0,0,0.75) 0.5px\", flex: \"none\" }} />\r\n                          <div style={{ display: \"flex\", flexDirection: \"column\", marginLeft: 8, width: \"95%\" }}>\r\n                            <span style={{ fontFamily: \"Montserrat\", color: \"rgba(0,0,0,0.75)\", fontWeight: 500, fontSize: 14, wordWrap: 'break-word', width: dimensions.width < mobile ? '80%' : '100%' }}>{item.name}</span>\r\n                            <span style={{ fontFamily: \"Montserrat\", color: \"rgba(0,0,0,0.75)\", fontSize: 12 }}>N = {chart === 1 ? item.payload.drugsPercentage[item.dataKey] : item.value}</span>\r\n                            <span style={{ fontFamily: \"Montserrat\", color: \"rgba(0,0,0,0.75)\", fontSize: 10 }}>{percentage}%</span>\r\n                          </div>\r\n                        </div>\r\n                      )\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n          }\r\n          return null;\r\n        }}\r\n      />\r\n    )\r\n  }, [dimensions, mobile])\r\n\r\n  useEffect(() => {\r\n    const plotPopulationStructureChart = () => {\r\n\r\n      if (populationStructureFilter === 1) { /* Genotype */\r\n        let maxH = 0\r\n        for (let index = 0; index < populationStructureChartData.length; index++) {\r\n          if (populationStructureChartData[index].total > maxH) {\r\n            maxH = populationStructureChartData[index].total\r\n          }\r\n        }\r\n        maxH = Math.ceil(maxH / 50) * 50\r\n        return (\r\n          <ResponsiveContainer width=\"90%\">\r\n            <BarChart\r\n              height={300}\r\n              data={populationStructureChartData}\r\n              margin={{\r\n                top: 20, bottom: 5, right: 0\r\n              }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" interval=\"preserveStartEnd\" tick={{ fontSize: 14 }} />\r\n              <YAxis domain={[0, maxH]} />\r\n              <Brush dataKey=\"name\" height={20} stroke={\"rgb(31, 187, 211)\"} />\r\n\r\n              {tooltip(300, dimensions.width < 620 ? 250 : 530, dimensions.width > 620 ? \"20%\" : \"50%\", false, { zIndex: 100, top: 20, right: -20 }, false)}\r\n              {genotypes.map((item) => <Bar dataKey={item} stackId=\"a\" fill={getColorForGenotype(item)} />)}\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        )\r\n      } else { /* H58 and Non-H58 */\r\n        return (\r\n          <ResponsiveContainer width=\"90%\">\r\n            <BarChart\r\n              width={500}\r\n              height={300}\r\n              data={populationStructureChartData}\r\n              margin={{\r\n                top: 20, bottom: 5, right: 0\r\n              }}\r\n              layout=\"vertical\"\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis type={\"number\"} domain={[0, chartMaxWidth]} />\r\n              <YAxis dataKey=\"name\" type={\"category\"} domain={[0, 50]} />\r\n              {tooltip(300, dimensions.width < 620 ? 250 : 530, dimensions.width > 620 ? \"20%\" : \"50%\", false, { zIndex: 100, top: 20, right: -20 }, false)}\r\n              {genotypes.map((item) => <Bar dataKey={item} stackId=\"a\" barSize={50} fill={getColorForGenotype(item)} />)}\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        )\r\n      }\r\n    }\r\n    setPlotPopulationStructureChart(plotPopulationStructureChart)\r\n  }, [chartMaxWidth, dimensions, genotypes, populationStructureChartData, populationStructureFilter, tooltip])\r\n\r\n  useEffect(() => {\r\n    const amrClassChartTooltip = () => {\r\n      return (\r\n        <Tooltip\r\n          position={{ x: 0 }}\r\n          wrapperStyle={{ zIndex: 100, top: 50 }}\r\n          allowEscapeViewBox={{ x: true, y: true }}\r\n          content={({ active, payload, label }) => {\r\n            if (payload !== null) {\r\n              if (active) {\r\n                return (\r\n                  <div style={{ backgroundColor: \"rgba(255,255,255,1)\", border: \"solid rgba(0,0,0,0.25) 1px\", padding: 16, display: \"flex\", flexDirection: \"column\" }}>\r\n                    <span style={{ fontFamily: \"Montserrat\", fontWeight: 600, fontSize: 24 }}>{label}</span>\r\n                    <div style={{ height: 14 }} />\r\n                    <div style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"space-between\", width: 250 }}>\r\n                      {payload.reverse().map((item, index) => {\r\n                        let percentage = ((item.value / item.payload.total2) * 100)\r\n                        // if (Math.round(percentage) !== percentage)\r\n                        //   percentage = percentage.toFixed(2)\r\n                        percentage = Math.round(percentage)\r\n                        return (\r\n                          <div key={index} style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\", width: \"33.33%\", marginBottom: 8 }}>\r\n                            <div style={{ backgroundColor: item.fill, height: 18, width: 18, border: \"solid rgb(0,0,0,0.75) 0.5px\", flex: \"none\" }} />\r\n                            <div style={{ display: \"flex\", flexDirection: \"column\", marginLeft: 8, wordWrap: \"break-word\", overflowX: \"hidden\" }}>\r\n                              <span style={{ fontFamily: \"Montserrat\", color: \"rgba(0,0,0,0.75)\", fontWeight: 500, fontSize: 14 }}>{item.name}</span>\r\n                              <span style={{ fontFamily: \"Montserrat\", color: \"rgba(0,0,0,0.75)\", fontSize: 12 }}>N = {item.value}</span>\r\n                              <span style={{ fontFamily: \"Montserrat\", color: \"rgba(0,0,0,0.75)\", fontSize: 10 }}>{percentage}%</span>\r\n                            </div>\r\n                          </div>\r\n                        )\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }\r\n            }\r\n\r\n            return null;\r\n          }}\r\n        />\r\n      )\r\n    }\r\n\r\n    const armClassFilterComponent = (info) => {\r\n      let maxSum = 0\r\n      if (amrClassChartData[amrClassChartData.length - 1] !== undefined) {\r\n        maxSum = amrClassChartData[amrClassChartData.length - 1].maxSum\r\n      }\r\n\r\n      const data = amrClassChartData.slice(0, amrClassChartData.length - 1)\r\n      return (\r\n        <ResponsiveContainer width=\"90%\">\r\n          <BarChart\r\n            width={500}\r\n            height={300}\r\n            data={data}\r\n            margin={{\r\n              top: 20, left: 0, bottom: 5, right: 0\r\n            }}\r\n            layout=\"horizontal\"\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"genotype\" type={\"category\"} interval={dimensions.width < middle ? 1 : 0} tick={{ fontSize: 14 }} />\r\n            <YAxis domain={[0, maxSum]} type={\"number\"} />\r\n            <Brush dataKey=\"genotype\" height={20} stroke={\"rgb(31, 187, 211)\"} />\r\n\r\n            {amrClassChartTooltip()}\r\n            {info.bars.map((item) => {\r\n              return (\r\n                <Bar dataKey={item[0]} fill={item[1]} stackId=\"a\" barSize={30} />\r\n              )\r\n            })}\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      )\r\n    }\r\n\r\n    const plotAmrClassChart = () => {\r\n      switch (amrClassFilter) {\r\n        case 'Azithromycin':\r\n          return (armClassFilterComponent({\r\n            left: -5, fontsize: 14, strokeWidth: 1, width: null, bars: [\r\n              ['acrB_R717Q', \"#addd8e\", \"error-acrB_R717Q\"],\r\n              ['ereA', \"#9e9ac8\", \"error-ereA\"],\r\n              ['ereA-acrB_R717Q', \"#FFEC78\", \"error-ereA-acrB_R717Q\"]\r\n            ]\r\n          }))\r\n        case 'Fluoroquinolones (DCS)':\r\n          return (armClassFilterComponent({\r\n            left: 10, fontsize: 14, strokeWidth: 0.5, width: 3, bars: [\r\n              ['3_QRDR', \"#6baed6\", \"error-3_QRDR\"],\r\n              ['2_QRDR', \"#FFEC78\", \"error-2_QRDR\"],\r\n              ['1_QRDR + qnrS', \"#66c2a4\", \"error-1_QRDR + qnrS\"],\r\n              ['1_QRDR', \"#FBCFE5\", \"error-1_QRDR\"]]\r\n          }))\r\n        case 'Chloramphenicol':\r\n          return (armClassFilterComponent({\r\n            left: 3, fontsize: 14, strokeWidth: 1, width: null, bars: [\r\n              ['cmlA', \"#addd8e\", \"error-cmlA\"],\r\n              ['catA1', \"#9e9ac8\", \"error-catA1\"],\r\n              [\"catA1-cmlA\", \"#FFEC78\", \"error-catA1-cmlA\"]\r\n            ]\r\n          }))\r\n        case 'Ampicillin':\r\n          return (armClassFilterComponent({\r\n            left: 3, fontsize: 14, strokeWidth: 1, width: null, bars: [\r\n              ['blaTEM-1D', \"#addd8e\", \"error-blaTEM-1D\"]]\r\n          }))\r\n        case 'Sulphonamides':\r\n          return (armClassFilterComponent({\r\n            left: 3, fontsize: 14, strokeWidth: 1, width: null, bars: [\r\n              ['sul2', \"#ffeda0\", \"error-sul2\"],\r\n              ['sul1', \"#fd8d3c\", \"error-sul1\"],\r\n              ['sul1-sul2', \"#B4DD70\", \"error-sul1-sul2\"]]\r\n          }))\r\n        case 'Trimethoprim':\r\n          return (armClassFilterComponent({\r\n            left: 3, fontsize: 14, strokeWidth: 0.5, width: 3, bars: [\r\n              ['dfrA7', \"#FFEC78\", \"error-dfrA7\"],\r\n              ['dfrA5', \"#D7AEF7\", \"error-dfrA5\"],\r\n              ['dfrA18', \"#66c2a4\", \"error-dfrA18\"],\r\n              ['dfrA17', \"#FCB469\", \"error-dfrA17\"],\r\n              ['dfrA15', \"#FBCFE5\", \"error-dfrA15\"],\r\n              ['dfrA14', \"#6baed6\", \"error-dfrA14\"],\r\n              ['dfrA1', \"#B4DD70\", \"error-dfrA1\"]]\r\n          }))\r\n        case 'Co-trimoxazole':\r\n          let cotrim = [\"dfrA1\", \"dfrA5\", \"dfrA7\", \"dfrA14\", \"dfrA15\", \"dfrA17\", \"dfrA18\"];\r\n          let colors1 = [\"#ffeda0\", \"#fd8d3c\", \"#addd8e\", \"#9e9ac8\", \"#6baed6\", \"#7a0177\", \"#54278f\"]\r\n          let colors2 = [\"#a50f15\", \"#6a5acd\", \"#f1b6da\", \"#fb8072\", \"#4682b4\", \"#2e8b57\", \"#98fb98\"]\r\n          let colors3 = [\"#fcc5c0\", \"#bcbddc\", \"#fdd0a2\", \"#c994c7\", \"#9ecae1\", \"#a8ddb5\", \"#fc9272\"]\r\n          let bars = []\r\n\r\n          for (const index in cotrim) {\r\n            bars.push([cotrim[index] + \"-sul1\", colors1[index], \"error-\" + cotrim[index] + \"-sul1\"])\r\n            bars.push([cotrim[index] + \"-sul2\", colors2[index], \"error-\" + cotrim[index] + \"-sul2\"])\r\n            bars.push([cotrim[index] + \"-sul1-sul2\", colors3[index], \"error-\" + cotrim[index] + \"-sul1-sul2\"])\r\n          }\r\n\r\n          return (armClassFilterComponent({\r\n            left: 3, fontsize: 14, strokeWidth: 0.5, width: 3, bars: bars\r\n          }))\r\n        case 'Tetracyclines':\r\n          return (armClassFilterComponent({\r\n            left: 3, fontsize: 14, strokeWidth: 1, width: null, bars: [\r\n              ['tetA(D)', getColorForTetracyclines('tetA(D)'), \"error-tetA(D)\"],\r\n              ['tetA(C)', getColorForTetracyclines('tetA(C)'), \"error-tetA(C)\"],\r\n              ['tetA(B)', getColorForTetracyclines('tetA(B)'), \"error-tetA(B)\"],\r\n              ['tetA(A)', getColorForTetracyclines('tetA(A)'), \"error-tetA(A)\"],\r\n              ['tetA(AB)', getColorForTetracyclines('tetA(AB)'), \"error-tetA(AB)\"],\r\n              ['tetA(ABC)', getColorForTetracyclines('tetA(ABC)'), \"error-tetA(ABC)\"],\r\n              ['tetA(ABCD)', getColorForTetracyclines('tetA(ABCD)'), \"error-tetA(ABCD)\"],\r\n              ['tetA(ABD)', getColorForTetracyclines('tetA(ABD)'), \"error-tetA(ABD)\"],\r\n              ['tetA(AC)', getColorForTetracyclines('tetA(AC)'), \"error-tetA(AC)\"],\r\n              ['tetA(AD)', getColorForTetracyclines('tetA(AD)'), \"error-tetA(AD)\"],\r\n              ['tetA(ACD)', getColorForTetracyclines('tetA(ACD)'), \"error-tetA(ACD)\"],\r\n              ['tetA(BC)', getColorForTetracyclines('tetA(BC)'), \"error-tetA(BC)\"],\r\n              ['tetA(BD)', getColorForTetracyclines('tetA(BD)'), \"error-tetA(BD)\"],\r\n              ['tetA(BCD)', getColorForTetracyclines('tetA(BCD)'), \"error-tetA(BCD)\"],\r\n              ['tetA(CD)', getColorForTetracyclines('tetA(CD)'), \"error-tetA(CD)\"]]\r\n          }))\r\n        case 'AMR Profiles':\r\n          return (armClassFilterComponent({\r\n            left: dimensions.width > desktop ? 12 : -30, fontsize: dimensions.width > desktop ? 14 : 5, strokeWidth: 0.5, width: 3, bars: [\r\n              ['No AMR detected', getColorForAMR('No AMR detected'), \"error-No AMR detected\"],\r\n              ['MDR_DCS', getColorForAMR('MDR_DCS'), \"error-MDR_DCS\"],\r\n              ['MDR', getColorForAMR('MDR'), \"error-MDR\"],\r\n              ['DCS', getColorForAMR('DCS'), \"error-DCS\"],\r\n              ['AzithR_MDR', getColorForAMR('AzithR_MDR'), \"error-AzithR_MDR\"],\r\n              ['AzithR_DCS', getColorForAMR('AzithR_DCS'), \"error-AzithR_DCS\"],\r\n              ['AzithR_DCS_MDR', getColorForAMR('AzithR_DCS_MDR'), \"error-AzithR_DCS_MDR\"],\r\n              ['XDR', getColorForAMR('XDR'), \"error-XDR\"],\r\n              ['AMR', getColorForAMR('AMR'), \"error-AMR\"],\r\n              ['AMR_DCS', getColorForAMR('AMR_DCS'), \"error-AMR_DCS\"]]\r\n          }))\r\n        case 'ESBL':\r\n          return (armClassFilterComponent({\r\n            left: 3, fontsize: 14, strokeWidth: 1, width: null, bars: [\r\n              ['blaSHV-12', \"#addd8e\", \"error-blaSHV-12\"],\r\n              ['blaOXA-7', \"#9e9ac8\", \"error-blaOXA-7\"],\r\n              ['blaCTX-M-15_23', \"#6baed6\", \"error-blaCTX-M-15_23\"]]\r\n          }))\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n    setPlotAmrClassChart(plotAmrClassChart)\r\n  }, [amrClassFilter, dimensions, amrClassChartData, desktop, middle])\r\n\r\n  useEffect(() => {\r\n    const plotDrugTrendsChart = () => {\r\n      return (\r\n        <ResponsiveContainer width=\"90%\">\r\n          <LineChart\r\n            height={300}\r\n            data={drugTrendsChartData.slice(0, drugTrendsChartData.length - 1)}\r\n            margin={{\r\n              top: 20, bottom: 5, right: 0, left: -5\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" interval={\"preserveStartEnd\"} tick={{ fontSize: 14 }} />\r\n            <YAxis />\r\n            <Brush dataKey=\"name\" height={20} stroke={\"rgb(31, 187, 211)\"} />\r\n\r\n            <Legend\r\n              content={(props) => {\r\n                const { payload } = props;\r\n                return (\r\n                  <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: 'flex-end' }}>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\", paddingLeft: 55, justifyContent: \"space-between\", marginTop: 10 }}>\r\n                      {payload.map((entry, index) => {\r\n                        const { dataKey, color } = entry\r\n                        return (\r\n                          <div key={index} style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"start\", width: 120, marginBottom: 4, marginLeft: 3, marginRight: 3 }}>\r\n                            <div style={{ height: 8, width: 8, borderRadius: 4, marginTop: 3, backgroundColor: color, flexShrink: 0 }} />\r\n                            <span style={{ fontSize: 12, paddingLeft: 4 }}>{dataKey}</span>\r\n                          </div>\r\n                        )\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }}\r\n            />\r\n            {tooltip(150, dimensions.width < mobile ? 250 : 325, \"50%\", true, { zIndex: 100, top: 175, right: 0 }, true, 1)}\r\n            {amrClassesForFilter.slice(1).map((item) => (<Line dataKey={item} stroke={getColorForDrug(item)} connectNulls dot={false} type=\"monotone\" />))}\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      )\r\n    }\r\n    setPlotDrugTrendsChart(plotDrugTrendsChart)\r\n  }, [amrClassesForFilter, dimensions, drugTrendsChartData, tooltip, mobile])\r\n\r\n  useEffect(() => {\r\n    const plotDrugsAndGenotypesChart = () => {\r\n      return (\r\n        <ResponsiveContainer width=\"90%\">\r\n          <BarChart\r\n            height={300}\r\n            data={drugsAndGenotypesChartData.slice(0, drugsAndGenotypesChartData.length - 1)}\r\n            margin={{\r\n              top: 20, left: -5, bottom: 5, right: 0\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" interval={dimensions.width < mobile ? 1 : 0} tick={{ fontSize: 14 }} />\r\n            <YAxis />\r\n            <Brush dataKey=\"name\" height={20} stroke={\"rgb(31, 187, 211)\"} />\r\n\r\n            <Legend\r\n              content={(props) => {\r\n                const { payload } = props;\r\n                return (\r\n                  <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: 'flex-end' }}>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\", paddingLeft: 55, justifyContent: \"space-between\", marginTop: 10 }}>\r\n                      {payload.map((entry, index) => {\r\n                        const { dataKey, color } = entry\r\n                        return (\r\n                          <div key={index} style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"start\", width: 120, marginBottom: 4, marginLeft: 3, marginRight: 3 }}>\r\n                            <div style={{ height: 8, width: 8, borderRadius: 4, marginTop: 3, backgroundColor: color, flexShrink: 0 }} />\r\n                            <span style={{ fontSize: 12, paddingLeft: 4 }}>{dataKey}</span>\r\n                          </div>\r\n                        )\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }}\r\n            />\r\n            {tooltip(150, dimensions.width < mobile ? 250 : 325, \"50%\", false, { zIndex: 100, top: 160 }, false, 0)}\r\n            {amrClassesForFilter.slice(1).map((item) => (<Bar dataKey={item} fill={getColorForDrug(item)} />))}\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      )\r\n    }\r\n    setPlotDrugsAndGenotypesChart(plotDrugsAndGenotypesChart)\r\n  }, [amrClassesForFilter, dimensions, drugsAndGenotypesChartData, tooltip, mobile])\r\n\r\n  const [getPopulationStructureChartLabel] = useState(() => () => {\r\n    if (populationStructureFilter === 1)\r\n      return <span className=\"y-axis-label-vertical\" style={{ paddingBottom: dimensions.width > desktop ? 0 : 0 }}>Number of genomes</span>\r\n    else\r\n      return <span className=\"x-axis-label-horizontal\">Number of genomes</span>\r\n  })\r\n\r\n  function imgOnLoadPromise(obj) {\r\n    return new Promise((resolve, reject) => {\r\n      obj.onload = () => resolve(obj);\r\n      obj.onerror = reject;\r\n    });\r\n  }\r\n\r\n  const [stopLoading] = useState(() => (index) => {\r\n    switch (index) {\r\n      case 0: setCaptureControlMapInProgress(false)\r\n        break;\r\n      case 1: setCaptureControlChartRFWGInProgress(false)\r\n        break;\r\n      case 2: setCaptureControlChartDRTInProgress(false)\r\n        break;\r\n      case 3: setCaptureControlChartGDInProgress(false)\r\n        break;\r\n      case 4: setCaptureControlChartRFWAGInProgress(false)\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  })\r\n\r\n  const [capturePicture] = useState(() => (id, index) => {\r\n    switch (index) {\r\n      case 0:\r\n        setCaptureControlMapInProgress(true)\r\n        setControlMapPosition({ coordinates: [0, 0], zoom: 1 })\r\n        break;\r\n      case 1: setCaptureControlChartRFWGInProgress(true)\r\n        break;\r\n      case 2: setCaptureControlChartDRTInProgress(true)\r\n        break;\r\n      case 3: setCaptureControlChartGDInProgress(true)\r\n        break;\r\n      case 4: setCaptureControlChartRFWAGInProgress(true)\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (index !== 0) {\r\n      const names = [\"Resistance Frequencies Within Genotypes (Chart) - TiphyNET.png\", \"Drug Resistance Trends (Chart) - TiphyNET.png\", \"Genotype Distribution (Chart) - TiphyNET.png\", \"Resistance determinants within all genotypes (Chart) - TiphyNET.png\"]\r\n      domtoimage.toPng(document.getElementById(id), { quality: 0.95, bgcolor: \"white\" })\r\n        .then(function (dataUrl) {\r\n          var link = document.createElement('a');\r\n          link.download = names[index - 1];\r\n          link.href = dataUrl;\r\n          stopLoading(index)\r\n          link.click();\r\n        });\r\n    } else {\r\n      svgAsPngUri(document.getElementById(id), { scale: 4, backgroundColor: \"white\", width: 1200, left: -200 })\r\n        .then(async (uri) => {\r\n\r\n          let canvas = document.createElement(\"canvas\")\r\n          let ctx = canvas.getContext('2d');\r\n\r\n          let mapImg = document.createElement(\"img\");\r\n          let mapImgPromise = imgOnLoadPromise(mapImg);\r\n          mapImg.src = uri;\r\n          await mapImgPromise;\r\n\r\n          canvas.width = 3600;\r\n          canvas.height = 1800;\r\n\r\n          ctx.fillStyle = \"white\";\r\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n          ctx.drawImage(mapImg, 0, 0, canvas.width, canvas.height);\r\n\r\n          let typhinetLogo = document.createElement(\"img\");\r\n          let typhinetLogoPromise = imgOnLoadPromise(typhinetLogo);\r\n          typhinetLogo.src = typhinetLogoImg;\r\n          await typhinetLogoPromise;\r\n\r\n          const typhinetLogoWidth = typhinetLogo.width * 0.5\r\n          const typhinetLogoHeight = typhinetLogo.height * 0.5\r\n\r\n          ctx.drawImage(typhinetLogo, 26, canvas.height - typhinetLogoHeight - 16, typhinetLogoWidth, typhinetLogoHeight);\r\n\r\n          const base64 = canvas.toDataURL();\r\n          stopLoading(index)\r\n          download(base64, 'Genome Samples (World Map) - TyphiNET.png');\r\n        });\r\n    }\r\n  })\r\n\r\n  const [dowloadBaseSpreadsheet] = useState(() => () => {\r\n    axios.get(`${API_ENDPOINT}file/download`)\r\n      .then((res) => {\r\n        download(res.data, 'TyphiNET_Database.csv');\r\n      })\r\n  })\r\n\r\n  const generateMapLegendOptions = () => {\r\n    let percentageSteps = ['1', '25', '50', '75', '100']\r\n\r\n    switch (mapView) {\r\n      case 'No. Samples':\r\n        return (\r\n          <>\r\n            <div className=\"samples-info\">\r\n              <div className=\"color\" style={{ backgroundColor: \"#F5F4F6\" }} />\r\n              <span>0</span>\r\n            </div>\r\n            {[...Array(6).keys()].map((n) => {\r\n              const samplesLegend = n !== 0 ? n * (samplesQty / 5) : 1\r\n              return (\r\n                <div key={n} className=\"samples-info\">\r\n                  <div className=\"color\" style={{ backgroundColor: mapSamplesColorScale(samplesLegend) }} />\r\n                  <span>{samplesLegend}</span>\r\n                </div>\r\n              )\r\n            })}\r\n          </>\r\n        )\r\n      // case 'AMR Profiles':\r\n      //   let amrProfiles = ['MDR_DCS', 'MDR', 'DCS', 'AzithR_MDR', 'AzithR_DCS', 'AzithR_DCS_MDR', 'XDR', 'AMR', 'AMR_DCS'].sort((a, b) => a.localeCompare(b));\r\n      //   amrProfiles.push('No AMR detected')\r\n      //   return (\r\n      //     <div style={{ maxHeight: 300, display: \"flex\", flexDirection: \"column\", overflowY: \"scroll\" }}>\r\n      //       {amrProfiles.map((a, n) => {\r\n      //         return (\r\n      //           <div key={n} className=\"samples-info\">\r\n      //             <div className=\"color\" style={{ backgroundColor: getColorForAMR(a) }} />\r\n      //             <span>{a}</span>\r\n      //           </div>\r\n      //         )\r\n      //       })}\r\n      //     </div>\r\n      //   )\r\n      case 'Dominant Genotype':\r\n        return (\r\n          <div style={{ maxHeight: 300, display: \"flex\", flexDirection: \"column\", overflowY: \"scroll\" }}>\r\n            {genotypes.map((g, n) => {\r\n              return (\r\n                <div key={n} className=\"samples-info\">\r\n                  <div className=\"color\" style={{ backgroundColor: getColorForGenotype(g) }} />\r\n                  <span>{g}</span>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        )\r\n      case 'H58 / Non-H58':\r\n        return (\r\n          <>\r\n            <div className=\"samples-info\">\r\n              <div className=\"color\" style={{ backgroundColor: \"#F5F4F6\" }} />\r\n              <span>0%</span>\r\n            </div>\r\n            {percentageSteps.map((g, n) => {\r\n              return (\r\n                <div key={n} className=\"samples-info\">\r\n                  <div className=\"color\" style={{ backgroundColor: mapRedColorScale(g) }} />\r\n                  <span>{g}%</span>\r\n                </div>\r\n              )\r\n            })}\r\n          </>\r\n        )\r\n      case 'MDR':\r\n        return (\r\n          <>\r\n            <div className=\"samples-info\">\r\n              <div className=\"color\" style={{ backgroundColor: \"#F5F4F6\" }} />\r\n              <span>0%</span>\r\n            </div>\r\n            {percentageSteps.map((n) => {\r\n              return (\r\n                <div key={n} className=\"samples-info\">\r\n                  <div className=\"color\" style={{ backgroundColor: mapRedColorScale(n) }} />\r\n                  <span>{n}%</span>\r\n                </div>\r\n              )\r\n            })}\r\n          </>\r\n        )\r\n      case 'XDR':\r\n        return (\r\n          <>\r\n            <div className=\"samples-info\">\r\n              <div className=\"color\" style={{ backgroundColor: \"#F5F4F6\" }} />\r\n              <span>0%</span>\r\n            </div>\r\n            {percentageSteps.map((n) => {\r\n              return (\r\n                <div key={n} className=\"samples-info\">\r\n                  <div className=\"color\" style={{ backgroundColor: mapRedColorScale(n) }} />\r\n                  <span>{n}%</span>\r\n                </div>\r\n              )\r\n            })}\r\n          </>\r\n        )\r\n      case 'DCS':\r\n        return (\r\n          <>\r\n            <div className=\"samples-info\">\r\n              <div className=\"color\" style={{ backgroundColor: \"#F5F4F6\" }} />\r\n              <span>0%</span>\r\n            </div>\r\n            {percentageSteps.map((n) => {\r\n              return (\r\n                <div key={n} className=\"samples-info\">\r\n                  <div className=\"color\" style={{ backgroundColor: mapRedColorScale(n) }} />\r\n                  <span>{n}%</span>\r\n                </div>\r\n              )\r\n            })}\r\n          </>\r\n        )\r\n      case 'Azith':\r\n        return (\r\n          <>\r\n            <div className=\"samples-info\">\r\n              <div className=\"color\" style={{ backgroundColor: \"#F5F4F6\" }} />\r\n              <span>0%</span>\r\n            </div>\r\n            {percentageSteps.map((n) => {\r\n              return (\r\n                <div key={n} className=\"samples-info\">\r\n                  <div className=\"color\" style={{ backgroundColor: mapRedColorScale(n) }} />\r\n                  <span>{n}%</span>\r\n                </div>\r\n              )\r\n            })}\r\n          </>\r\n        )\r\n      case 'CipI':\r\n        return (\r\n          <>\r\n            <div className=\"samples-info\">\r\n              <div className=\"color\" style={{ backgroundColor: \"#F5F4F6\" }} />\r\n              <span>0%</span>\r\n            </div>\r\n            {percentageSteps.map((n) => {\r\n              return (\r\n                <div key={n} className=\"samples-info\">\r\n                  <div className=\"color\" style={{ backgroundColor: mapRedColorScale(n) }} />\r\n                  <span>{n}%</span>\r\n                </div>\r\n              )\r\n            })}\r\n          </>\r\n        )\r\n      case 'CipR':\r\n        return (\r\n          <>\r\n            <div className=\"samples-info\">\r\n              <div className=\"color\" style={{ backgroundColor: \"#F5F4F6\" }} />\r\n              <span>0%</span>\r\n            </div>\r\n            {percentageSteps.map((n) => {\r\n              return (\r\n                <div key={n} className=\"samples-info\">\r\n                  <div className=\"color\" style={{ backgroundColor: mapRedColorScale(n) }} />\r\n                  <span>{n}%</span>\r\n                </div>\r\n              )\r\n            })}\r\n          </>\r\n        )\r\n      // case 'Resistance to Drug':\r\n      //   let drugs = [\"Ampicillin\", \"Azithromycin\", \"Chloramphenicol\", \"Co-trimoxazole\", \"ESBL\", \"Fluoroquinolones\", \"Sulphonamides\", \"Tetracyclines\", \"Trimethoprim\"]\r\n      //   return (\r\n      //     <div style={{ maxHeight: 300, display: \"flex\", flexDirection: \"column\", overflowY: \"scroll\" }}>\r\n      //       {drugs.map((d, n) => {\r\n      //         return (\r\n      //           <div key={n} className=\"samples-info\">\r\n      //             <div className=\"color\" style={{ backgroundColor: getColorForDrug(d) }} />\r\n      //             <span>{d}</span>\r\n      //           </div>\r\n      //         )\r\n      //       })}\r\n      //     </div>\r\n      //   )\r\n      // case 'Plasmid Incompatibility Type':\r\n      //   let incTypes = [\"IncX1\", \"IncFIA(HI1)\", \"IncFIB(pHCM2)\", \"IncA/C2\", \"IncP1\", \"IncFIA(HI1)/IncHI1A/IncHI1B(R27)\", \"Col(BS512)\", \"IncHI1A/IncHI1B(R27)\", \"IncN\", \"IncHI1B(R27)\", \"p0111\", \"IncHI1A\", \"IncI1\", \"IncY\", \"IncFIB(AP001918)\", \"IncFIB(K)\", \"IncHI2/IncHI2A\", \"Col440I\", \"Col440I\", \"Col156\", \"Col440II/Col440II\", \"IncFIA(HI1)/IncHI1A\", \"ColRNAI\", \"ColpVC\", \"IncX3\"].sort((a, b) => a.localeCompare(b));\r\n      //   return (\r\n      //     <div style={{ maxHeight: 300, display: \"flex\", flexDirection: \"column\", overflowY: \"scroll\" }}>\r\n      //       {incTypes.map((d, n) => {\r\n      //         return (\r\n      //           <div key={n} className=\"samples-info\">\r\n      //             <div className=\"color\" style={{ backgroundColor: getColorForIncType(d) }} />\r\n      //             <span>{d}</span>\r\n      //           </div>\r\n      //         )\r\n      //       })}\r\n      //     </div>\r\n      //   )\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  const renderMapLegend = () => {\r\n    return (\r\n      <div className=\"map-legend\">\r\n        <FormControl fullWidth className={classes.formControlSelect} style={{ marginBottom: 12, marginTop: 2 }}>\r\n          <InputLabel style={{ fontWeight: 500, fontFamily: \"Montserrat\", whiteSpace: \"nowrap\" }}>Select map view</InputLabel>\r\n          <Select\r\n            value={mapView}\r\n            onChange={evt => setMapView(evt.target.value)}\r\n            fullWidth\r\n            style={{ fontWeight: 600, fontFamily: \"Montserrat\", fontSize: 14 }}\r\n          >\r\n            <MenuItem style={{ fontWeight: 600, fontFamily: \"Montserrat\", fontSize: 14 }} value={'MDR'}>\r\n              Multidrug resistant (MDR)\r\n            </MenuItem>\r\n            <MenuItem style={{ fontWeight: 600, fontFamily: \"Montserrat\", fontSize: 14 }} value={'XDR'}>\r\n              Extremely drug resistant (XDR)\r\n            </MenuItem>\r\n            <MenuItem style={{ fontWeight: 600, fontFamily: \"Montserrat\", fontSize: 14 }} value={'Azith'}>\r\n              Azithromycin resistant\r\n            </MenuItem>\r\n            <MenuItem style={{ fontWeight: 600, fontFamily: \"Montserrat\", fontSize: 14 }} value={'CipI'}>\r\n              Ciprofloxacin insusceptible\r\n            </MenuItem>\r\n            <MenuItem style={{ fontWeight: 600, fontFamily: \"Montserrat\", fontSize: 14 }} value={'CipR'}>\r\n              Ciprofloxacin resistant\r\n            </MenuItem>\r\n            <MenuItem style={{ fontWeight: 600, fontFamily: \"Montserrat\", fontSize: 14 }} value={'Dominant Genotype'}>\r\n              Dominant Genotype\r\n            </MenuItem>\r\n            <MenuItem style={{ fontWeight: 600, fontFamily: \"Montserrat\", fontSize: 14 }} value={'H58 / Non-H58'}>\r\n              H58 genotype\r\n            </MenuItem>\r\n            <MenuItem style={{ fontWeight: 600, fontFamily: \"Montserrat\", fontSize: 14 }} value={'No. Samples'}>\r\n              No. Samples\r\n            </MenuItem>\r\n            {/* <MenuItem style={{ fontWeight: 600, fontFamily: \"Montserrat\", fontSize: 14 }} value={'AMR Profiles'}>\r\n              AMR Profiles\r\n            </MenuItem> */}\r\n            {/* <MenuItem style={{ fontWeight: 600, fontFamily: \"Montserrat\", fontSize: 14 }} value={'Plasmid Incompatibility Type'}>\r\n              Plasmid Incompatibility Type\r\n            </MenuItem> */}\r\n            {/* <MenuItem style={{ fontWeight: 600, fontFamily: \"Montserrat\", fontSize: 14 }} value={'DCS'}>\r\n              DCS\r\n            </MenuItem> */}\r\n            {/* <MenuItem style={{ fontWeight: 600, fontFamily: \"Montserrat\", fontSize: 14 }} value={'Resistance to Drug'}>\r\n              Resistance to Drug\r\n            </MenuItem> */}\r\n          </Select>\r\n        </FormControl>\r\n        {generateMapLegendOptions()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <div className=\"menu-bar-mobile\">\r\n        <img className=\"logoImageMenu-mobile\" src={typhinetLogoImg} alt=\"TyphiNET\" />\r\n      </div>\r\n      <div style={{ padding: dimensions.width > 770 ? '16px 16px 0px 16px' : '16px 0px 0px 0px' }}>\r\n        <div className=\"info-wrapper\">\r\n          {dimensions.width > desktop && (\r\n            <>\r\n              <div style={{ display: \"flex\", flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n                <img style={{ height: 90, marginBottom: -10 }} src={typhinetLogoImg} alt=\"TyphiNET\" />\r\n              </div>\r\n              <div style={{ width: 16 }} />\r\n            </>\r\n          )}\r\n          <div className=\"card\">\r\n            <span>Total Genomes</span>\r\n            {totalGenomes.length === actualGenomes.length ? (\r\n              <span className=\"value\">{totalGenomes.length}</span>\r\n            ) : (\r\n              <span className=\"value\">\r\n                {actualGenomes.length}\r\n                <span className=\"value-total\">/{totalGenomes.length}</span>\r\n              </span>\r\n            )}\r\n          </div>\r\n          <div style={{ width: 16 }} />\r\n          <div className=\"card\">\r\n            <span>\r\n              Total Genotypes\r\n              <FontAwesomeIcon icon={faInfoCircle} onClick={handleClickOpen} className=\"icon-info\" />\r\n              <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n              >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Information\"}</DialogTitle>\r\n                <DialogContent>\r\n                  <DialogContentText id=\"alert-dialog-description\">\r\n                    Total genotypes present in TyphiNET database / Total genotypes worldwide published\r\n                  </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Button onClick={handleClose} color=\"primary\">\r\n                    Close\r\n                  </Button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            </span>\r\n            {totalGenotypes.length === actualGenotypes.length ? (\r\n              <span className=\"value\">{totalGenotypes.length}</span>\r\n            ) : (\r\n              <span className=\"value\">\r\n                {actualGenotypes.length}\r\n                <span className=\"value-total\">/{totalGenotypes.length}</span>\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"map-filters-wrapper\" style={{ flexDirection: 'column' }}>\r\n          <h2 style={{ textAlign: \"center\" }}>Global Overview of <i>Salmonella</i> Typhi</h2>\r\n          <div className=\"map-filters-wrapper-inside\" style={{ flexDirection: dimensions.width > desktop ? 'row' : 'column' }}>\r\n            <div className=\"map-wrapper\">\r\n              <ComposableMap\r\n                id=\"control-map\"\r\n                data-tip=\"\"\r\n                projectionConfig={{\r\n                  rotate: [-10, 0, 0],\r\n                  scale: 210,\r\n                }}\r\n                style={{ height: \"100%\", width: \"100%\" }}\r\n              >\r\n                <ZoomableGroup\r\n                  zoom={controlMapPosition.zoom}\r\n                  center={controlMapPosition.coordinates}\r\n                  onMoveEnd={(position) => {\r\n                    setControlMapPosition(position);\r\n                  }}\r\n                >\r\n                  <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} />\r\n                  <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\r\n                  <Geographies\r\n                    geography={geography}>\r\n                    {({ geographies }) =>\r\n                      geographies.map((geo) => {\r\n                        const sample = worldMapSamplesData.find(s => s.displayName === geo.properties.NAME)\r\n                        const d = worldMapComplementaryData[geo.properties.NAME]; /* .NAME || .NAME_LONG */\r\n                        let country\r\n\r\n                        let fill = \"lightgrey\"\r\n\r\n                        switch (mapView) {\r\n                          case 'No. Samples':\r\n                            if (sample && sample.count !== 0) {\r\n                              fill = mapSamplesColorScale(sample.count);\r\n                            } else if (sample && sample.count === 0) {\r\n                              fill = '#F5F4F6'\r\n                            }\r\n                            break;\r\n                          case 'AMR Profiles':\r\n                            country = worldMapAmrProfilesData.find(s => s.displayName === geo.properties.NAME)\r\n                            if (country !== undefined && country.amrProfiles.length > 0)\r\n                              fill = getColorForAMR(country.amrProfiles[0].name);\r\n                            break;\r\n                          case 'Dominant Genotype':\r\n                            country = worldMapGenotypesData.find(s => s.displayName === geo.properties.NAME)\r\n                            if (country !== undefined) {\r\n                              const temp = country.genotypes\r\n                              temp.sort((a, b) => a.count <= b.count ? 1 : -1)\r\n                              fill = getColorForGenotype(temp[0].lineage)\r\n                            }\r\n                            break;\r\n                          case 'H58 / Non-H58':\r\n                            country = worldMapH58Data.find(s => s.displayName === geo.properties.NAME)\r\n                            if (country !== undefined && country.genotypes[0]) {\r\n                              const temp = country.genotypes.find(g => g.type === 'H58')\r\n                              switch (temp === undefined) {\r\n                                case false:\r\n                                  fill = mapRedColorScale(temp.percentage)\r\n                                  break;\r\n                                case 'Non-H58':\r\n                                  fill = '#F5F4F6'\r\n                                  break;\r\n                                default:\r\n                                  fill = '#F5F4F6'\r\n                                  break;\r\n                              }\r\n                            }\r\n                            break;\r\n                          case 'MDR':\r\n                            country = worldMapMDRData.find(s => s.displayName === geo.properties.NAME)\r\n                            if (country !== undefined && country.percentage) {\r\n                              fill = mapRedColorScale(country.percentage);\r\n                            } else if (country !== undefined) {\r\n                              fill = '#F5F4F6'\r\n                            }\r\n                            break;\r\n                          case 'XDR':\r\n                            country = worldMapXDRData.find(s => s.displayName === geo.properties.NAME)\r\n                            if (country !== undefined && country.percentage) {\r\n                              fill = mapRedColorScale(country.percentage);\r\n                            } else if (country !== undefined) {\r\n                              fill = '#F5F4F6'\r\n                            }\r\n                            break;\r\n                          case 'DCS':\r\n                            country = worldMapDCSData.find(s => s.displayName === geo.properties.NAME)\r\n                            if (country !== undefined && country.percentage) {\r\n                              fill = mapRedColorScale(country.percentage);\r\n                            } else if (country !== undefined) {\r\n                              fill = '#F5F4F6'\r\n                            }\r\n                            break;\r\n                          case 'Azith':\r\n                            country = worldMapAZITHData.find(s => s.displayName === geo.properties.NAME)\r\n                            if (country !== undefined && country.percentage) {\r\n                              fill = mapRedColorScale(country.percentage);\r\n                            } else if (country !== undefined) {\r\n                              fill = '#F5F4F6'\r\n                            }\r\n                            break;\r\n                          case 'CipI':\r\n                            country = worldMapCIPIData.find(s => s.displayName === geo.properties.NAME)\r\n                            if (country !== undefined && country.percentage) {\r\n                              fill = mapRedColorScale(country.percentage);\r\n                            } else if (country !== undefined) {\r\n                              fill = '#F5F4F6'\r\n                            }\r\n                            break;\r\n                          case 'CipR':\r\n                            country = worldMapCIPRData.find(s => s.displayName === geo.properties.NAME)\r\n                            if (country !== undefined && country.percentage) {\r\n                              fill = mapRedColorScale(country.percentage);\r\n                            } else if (country !== undefined) {\r\n                              fill = '#F5F4F6'\r\n                            }\r\n                            break;\r\n                          case 'Resistance to Drug':\r\n                            country = worldMapDrugsData.find(s => s.displayName === geo.properties.NAME)\r\n                            if (country !== undefined && country.drugs.length > 0) {\r\n                              fill = getColorForDrug(country.drugs[0].name);\r\n                            } else if (country !== undefined) {\r\n                              fill = '#F5F4F6'\r\n                            }\r\n                            break;\r\n                          case 'Plasmid Incompatibility Type':\r\n                            country = worldMapPlasmidIncompatibilityTypeData.find(s => s.displayName === geo.properties.NAME)\r\n                            if (country !== undefined && country.incTypes.length > 0) {\r\n                              fill = getColorForIncType(country.incTypes[0].type);\r\n                            } else if (country !== undefined) {\r\n                              fill = '#F5F4F6'\r\n                            }\r\n                            break;\r\n                          default:\r\n                            break;\r\n                        }\r\n\r\n                        return (\r\n                          <Geography\r\n                            key={geo.rsmKey}\r\n                            geography={geo}\r\n                            cursor=\"pointer\"\r\n                            fill={fill}\r\n                            onClick={() => {\r\n                              if (d !== undefined && sample !== undefined)\r\n                                setActualCountry(sample.name)\r\n                            }}\r\n                            onMouseEnter={() => {\r\n                              const { NAME } = geo.properties;\r\n                              switch (mapView) {\r\n                                case 'No. Samples':\r\n                                  if (sample !== undefined && d !== undefined) {\r\n                                    setTooltipContent({\r\n                                      name: NAME,\r\n                                      additionalInfo: {\r\n                                        samples: sample.count,\r\n                                        genotypes: d.GENOTYPES.TOTAL,\r\n                                        H58: Math.round(d.H58) !== d.H58 ? d.H58.toFixed(2) : d.H58,\r\n                                        MDR: Math.round(d.MDR) !== d.MDR ? d.MDR.toFixed(2) : d.MDR,\r\n                                        DCS: Math.round(d.DCS) !== d.DCS ? d.DCS.toFixed(2) : d.DCS,\r\n                                        CipI: Math.round(d.CipI) !== d.CipI ? d.CipI.toFixed(2) : d.CipI,\r\n                                        CipR: Math.round(d.CipR) !== d.CipR ? d.CipR.toFixed(2) : d.CipR,\r\n                                        AzithR: Math.round(d.AzithR) !== d.AzithR ? d.AzithR.toFixed(2) : d.AzithR\r\n                                      }\r\n                                    });\r\n                                  } else {\r\n                                    setTooltipContent({\r\n                                      name: NAME\r\n                                    })\r\n                                  }\r\n                                  break;\r\n                                case 'AMR Profiles':\r\n                                  if (country !== undefined) {\r\n                                    setTooltipContent({\r\n                                      name: NAME,\r\n                                      amrProfilesInfo: country.amrProfiles\r\n                                    });\r\n                                  } else {\r\n                                    setTooltipContent({\r\n                                      name: NAME\r\n                                    })\r\n                                  }\r\n                                  break;\r\n                                case 'Dominant Genotype':\r\n                                  if (country !== undefined) {\r\n                                    let temp = country.genotypes\r\n                                    temp.sort((a, b) => a.count <= b.count ? 1 : -1)\r\n                                    setTooltipContent({\r\n                                      name: NAME,\r\n                                      genotypeInfo: temp\r\n                                    });\r\n                                  } else {\r\n                                    setTooltipContent({\r\n                                      name: NAME\r\n                                    })\r\n                                  }\r\n                                  break;\r\n                                case 'H58 / Non-H58':\r\n                                  if (country !== undefined && country.genotypes.length > 0) {\r\n                                    setTooltipContent({\r\n                                      name: NAME,\r\n                                      simpleGenotypeInfo: country.genotypes\r\n                                    });\r\n                                  } else {\r\n                                    setTooltipContent({\r\n                                      name: NAME\r\n                                    })\r\n                                  }\r\n                                  break;\r\n                                case 'MDR':\r\n                                  if (country !== undefined && country.MDRs.length > 0) {\r\n                                    setTooltipContent({\r\n                                      name: NAME,\r\n                                      mdrInfo: {\r\n                                        count: country.count,\r\n                                        percentage: country.percentage,\r\n                                      }\r\n                                    });\r\n                                  } else {\r\n                                    setTooltipContent({\r\n                                      name: NAME\r\n                                    })\r\n                                  }\r\n                                  break;\r\n                                case 'XDR':\r\n                                  if (country !== undefined && country.XDRs.length > 0) {\r\n                                    setTooltipContent({\r\n                                      name: NAME,\r\n                                      xdrInfo: {\r\n                                        count: country.count,\r\n                                        percentage: country.percentage,\r\n                                      }\r\n                                    });\r\n                                  } else {\r\n                                    setTooltipContent({\r\n                                      name: NAME\r\n                                    })\r\n                                  }\r\n                                  break;\r\n                                case 'DCS':\r\n                                  if (country !== undefined && country.DCSs.length > 0) {\r\n                                    setTooltipContent({\r\n                                      name: NAME,\r\n                                      dcsInfo: {\r\n                                        count: country.count,\r\n                                        percentage: country.percentage,\r\n                                      }\r\n                                    });\r\n                                  } else {\r\n                                    setTooltipContent({\r\n                                      name: NAME\r\n                                    })\r\n                                  }\r\n                                  break;\r\n                                case 'Azith':\r\n                                  if (country !== undefined && country.AZs.length > 0) {\r\n                                    setTooltipContent({\r\n                                      name: NAME,\r\n                                      azInfo: {\r\n                                        count: country.count,\r\n                                        percentage: country.percentage,\r\n                                      }\r\n                                    });\r\n                                  } else {\r\n                                    setTooltipContent({\r\n                                      name: NAME\r\n                                    })\r\n                                  }\r\n                                  break;\r\n                                case 'CipI':\r\n                                  if (country !== undefined && country.CipIs.length > 0) {\r\n                                    setTooltipContent({\r\n                                      name: NAME,\r\n                                      cipIInfo: {\r\n                                        count: country.count,\r\n                                        percentage: country.percentage,\r\n                                      }\r\n                                    });\r\n                                  } else {\r\n                                    setTooltipContent({\r\n                                      name: NAME\r\n                                    })\r\n                                  }\r\n                                  break;\r\n                                case 'CipR':\r\n                                  if (country !== undefined && country.CipRs.length > 0) {\r\n                                    setTooltipContent({\r\n                                      name: NAME,\r\n                                      cipRInfo: {\r\n                                        count: country.count,\r\n                                        percentage: country.percentage,\r\n                                      }\r\n                                    });\r\n                                  } else {\r\n                                    setTooltipContent({\r\n                                      name: NAME\r\n                                    })\r\n                                  }\r\n                                  break;\r\n                                case 'Resistance to Drug':\r\n                                  if (country !== undefined && country.drugs.length > 0) {\r\n                                    setTooltipContent({\r\n                                      name: NAME,\r\n                                      drugsInfo: country.drugs\r\n                                    });\r\n                                  } else {\r\n                                    setTooltipContent({\r\n                                      name: NAME\r\n                                    })\r\n                                  }\r\n                                  break;\r\n                                case 'Plasmid Incompatibility Type':\r\n                                  if (country !== undefined && country.incTypes.length > 0) {\r\n                                    setTooltipContent({\r\n                                      name: NAME,\r\n                                      incTypesInfo: country.incTypes\r\n                                    });\r\n                                  } else {\r\n                                    setTooltipContent({\r\n                                      name: NAME\r\n                                    })\r\n                                  }\r\n                                  break;\r\n                                default:\r\n                                  break;\r\n                              }\r\n                            }}\r\n                            style={{\r\n                              default: {\r\n                                outline: \"none\",\r\n                              },\r\n                              hover: {\r\n                                fill: \"#CFD8DC\",\r\n                                stroke: \"#607D8B\",\r\n                                strokeWidth: 1,\r\n                                outline: \"none\",\r\n                              },\r\n                              pressed: {\r\n                                fill: \"#FF5722\",\r\n                                stroke: \"#607D8B\",\r\n                                strokeWidth: 1,\r\n                                outline: \"none\",\r\n                              }\r\n                            }}\r\n                          />\r\n                        );\r\n                      })\r\n                    }\r\n                  </Geographies>\r\n                </ZoomableGroup>\r\n\r\n              </ComposableMap>\r\n              {(dimensions.width > desktop) && (\r\n                <div className=\"map-upper-right-buttons\">\r\n                  {renderMapLegend()}\r\n                </div>\r\n              )}\r\n              {(\r\n                <div className=\"map-upper-left-buttons \">\r\n                  <div className=\"map-filters\" style={{ width: dimensions.width > desktop ? 200 : \"-webkit-fill-available\" }}>\r\n                    <span style={{ fontWeight: 600, fontSize: 20, marginBottom: dimensions.width > desktop ? 20 : 10 }}>Filters</span>\r\n                    <div style={{ marginBottom: dimensions.width > desktop ? 16 : 8 }}>\r\n                      <Typography style={{ fontWeight: 500, fontFamily: \"Montserrat\", color: \"rgb(117,117,117)\", fontSize: 12 }}>\r\n                        Select dataset\r\n                      </Typography>\r\n                      <ToggleButtonGroup\r\n                        value={dataset}\r\n                        exclusive\r\n                        size=\"small\"\r\n                        style={{ marginTop: 5 }}\r\n                        onChange={(evt, newDataset) => {\r\n                          if (newDataset !== null)\r\n                            setDataset(newDataset)\r\n                        }}\r\n                      >\r\n                        <CustomToggleButton value=\"full\">\r\n                          All\r\n                        </CustomToggleButton>\r\n                        <CustomToggleButton value=\"global\">\r\n                          Local\r\n                        </CustomToggleButton>\r\n                        <CustomToggleButton value=\"local\">\r\n                          Travel\r\n                        </CustomToggleButton>\r\n                      </ToggleButtonGroup>\r\n                    </div>\r\n                    <div style={{ marginTop: 4 }}>\r\n                      <Typography gutterBottom style={{ fontWeight: 500, fontFamily: \"Montserrat\", color: \"rgb(117,117,117)\", fontSize: 12 }}>\r\n                        Select time period\r\n                      </Typography>\r\n                      <CustomSlider\r\n                        style={{ marginTop: dimensions.width > desktop ? '' : -5, marginBottom: dimensions.width > desktop ? '' : -5 }}\r\n                        value={actualTimePeriodRange}\r\n                        min={timePeriodRange[0]}\r\n                        max={timePeriodRange[1]}\r\n                        onChange={(evt, value) => {\r\n                          setActualTimePeriodRange(value)\r\n                        }}\r\n                        valueLabelDisplay=\"auto\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              <div className=\"map-lower-left-buttons\">\r\n                <Zoom in={controlMapPosition.zoom !== 1 || controlMapPosition.coordinates.some(c => c !== 0)}>\r\n                  <TooltipMaterialUI title={<span style={{ fontFamily: \"Montserrat\" }}>Recenter Map</span>} placement=\"right\">\r\n                    <div\r\n                      className=\"button\"\r\n                      onClick={() => setControlMapPosition({ coordinates: [0, 0], zoom: 1 })}\r\n                    >\r\n                      <FontAwesomeIcon icon={faCrosshairs} />\r\n                    </div>\r\n                  </TooltipMaterialUI>\r\n                </Zoom>\r\n                <TooltipMaterialUI title={<span style={{ fontFamily: \"Montserrat\" }}>Zoom In</span>} placement=\"right\">\r\n                  <div\r\n                    className=\"button\"\r\n                    onClick={() => {\r\n                      if (controlMapPosition.zoom >= 4) return;\r\n                      setControlMapPosition(pos => ({ ...pos, zoom: pos.zoom * 2 }));\r\n                    }}\r\n                  >\r\n                    <FontAwesomeIcon icon={faPlus} />\r\n                  </div>\r\n                </TooltipMaterialUI>\r\n                <TooltipMaterialUI title={<span style={{ fontFamily: \"Montserrat\" }}>Zoom Out</span>} placement=\"right\">\r\n                  <div\r\n                    className=\"button\"\r\n                    onClick={() => {\r\n                      if (controlMapPosition.zoom <= 1) return;\r\n                      if (controlMapPosition.zoom / 2 === 1) {\r\n                        setControlMapPosition({ coordinates: [0, 0], zoom: 1 });\r\n                      } else {\r\n                        setControlMapPosition(pos => ({ ...pos, zoom: pos.zoom / 2 }));\r\n                      }\r\n                    }}\r\n                  >\r\n                    <FontAwesomeIcon icon={faMinus} />\r\n                  </div>\r\n                </TooltipMaterialUI>\r\n              </div>\r\n              <div className=\"map-lower-right-buttons\">\r\n                <TooltipMaterialUI title={<span style={{ fontFamily: \"Montserrat\" }}>Download Map as PNG</span>} placement=\"left\">\r\n                  <div\r\n                    className={`button ${captureControlMapInProgress && \"disabled\"}`}\r\n                    onClick={() => {\r\n                      if (!captureControlMapInProgress)\r\n                        capturePicture('control-map', 0)\r\n                    }}\r\n                  >\r\n                    <FontAwesomeIcon icon={faCamera} />\r\n                  </div>\r\n                </TooltipMaterialUI>\r\n                {captureControlMapInProgress && (\r\n                  <CustomCircularProgress\r\n                    size={54}\r\n                    thickness={4}\r\n                    style={{ position: \"absolute\", top: 5, left: -7 }} />\r\n                )}\r\n              </div>\r\n            </div>\r\n            {!(dimensions.width > desktop) && (\r\n              <div style={{ marginTop: 16, marginBottom: 8 }}>\r\n                {renderMapLegend()}\r\n              </div>\r\n            )}\r\n            <ReactTooltip>\r\n              {tooltipContent && (\r\n                <div className=\"tooltip-map\">\r\n                  <span className=\"country\">{tooltipContent.name}</span>\r\n                  {tooltipContent.additionalInfo && (\r\n                    <div className=\"additional-info\">\r\n                      <span>Samples: {tooltipContent.additionalInfo.samples}</span>\r\n                      <span>Genotypes: {tooltipContent.additionalInfo.genotypes}</span>\r\n                      <span>H58: {tooltipContent.additionalInfo.H58}%</span>\r\n                      <span>MDR: {tooltipContent.additionalInfo.MDR}%</span>\r\n                      <span>DCS: {tooltipContent.additionalInfo.DCS}%</span>\r\n                      <span>AzithR: {tooltipContent.additionalInfo.AzithR}%</span>\r\n                      <span>CipI: {tooltipContent.additionalInfo.CipI}%</span>\r\n                      <span>CipR: {tooltipContent.additionalInfo.CipR}%</span>\r\n                    </div>\r\n                  )}\r\n                  {tooltipContent.genotypeInfo && (\r\n                    <div className=\"additional-info\" style={{ marginTop: 4 }}>\r\n                      {tooltipContent.genotypeInfo.map((genotype, index) => {\r\n                        if (index < 5) {\r\n                          return (\r\n                            <div key={index} className=\"genotype\">\r\n                              <div className=\"color\" style={{ backgroundColor: getColorForGenotype(genotype.lineage) }} />\r\n                              <span>{genotype.lineage}: {genotype.count}</span>\r\n                            </div>\r\n                          )\r\n                        } else\r\n                          return null;\r\n                      })}\r\n                    </div>\r\n                  )}\r\n                  {tooltipContent.simpleGenotypeInfo && (\r\n                    <div className=\"additional-info\" style={{ marginTop: 4 }}>\r\n                      {tooltipContent.simpleGenotypeInfo[0].type === \"H58\" ? (\r\n                        <span>{tooltipContent.simpleGenotypeInfo[0].type}: {tooltipContent.simpleGenotypeInfo[0].count} ({tooltipContent.simpleGenotypeInfo[0].percentage}%)</span>\r\n                      ) : tooltipContent.simpleGenotypeInfo.length > 1 && tooltipContent.simpleGenotypeInfo[1].type === \"H58\" ? (\r\n                        <span>{tooltipContent.simpleGenotypeInfo[1].type}: {tooltipContent.simpleGenotypeInfo[1].count} ({tooltipContent.simpleGenotypeInfo[1].percentage}%)</span>\r\n                      ) : (\r\n                        <span>H58: 0 (0%)</span>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                  {tooltipContent.mdrInfo && (\r\n                    <div className=\"additional-info\">\r\n                      <span>MDR: {tooltipContent.mdrInfo.count} ({tooltipContent.mdrInfo.percentage}%)</span>\r\n                    </div>\r\n                  )}\r\n                  {tooltipContent.xdrInfo && (\r\n                    <div className=\"additional-info\">\r\n                      <span>XDR: {tooltipContent.xdrInfo.count} ({tooltipContent.xdrInfo.percentage}%)</span>\r\n                    </div>\r\n                  )}\r\n                  {tooltipContent.dcsInfo && (\r\n                    <div className=\"additional-info\">\r\n                      <span>DCS: {tooltipContent.dcsInfo.count} ({tooltipContent.dcsInfo.percentage}%)</span>\r\n                    </div>\r\n                  )}\r\n                  {tooltipContent.azInfo && (\r\n                    <div className=\"additional-info\">\r\n                      <span>AzithR: {tooltipContent.azInfo.count} ({tooltipContent.azInfo.percentage}%)</span>\r\n                    </div>\r\n                  )}\r\n                  {tooltipContent.cipIInfo && (\r\n                    <div className=\"additional-info\">\r\n                      <span>CipI: {tooltipContent.cipIInfo.count} ({tooltipContent.cipIInfo.percentage}%)</span>\r\n                    </div>\r\n                  )}\r\n                  {tooltipContent.cipRInfo && (\r\n                    <div className=\"additional-info\">\r\n                      <span>CipR: {tooltipContent.cipRInfo.count} ({tooltipContent.cipRInfo.percentage}%)</span>\r\n                    </div>\r\n                  )}\r\n                  {tooltipContent.drugsInfo && (\r\n                    <div className=\"additional-info\" style={{ marginTop: 4 }}>\r\n                      {tooltipContent.drugsInfo.map((drug, index) => {\r\n                        if (index < 5) {\r\n                          return (\r\n                            <div key={index} className=\"genotype\">\r\n                              <div className=\"color\" style={{ backgroundColor: getColorForDrug(drug.name) }} />\r\n                              <span>{drug.name}: {drug.count}</span>\r\n                            </div>\r\n                          )\r\n                        } else\r\n                          return null;\r\n                      })}\r\n                    </div>\r\n                  )}\r\n                  {tooltipContent.amrProfilesInfo && (\r\n                    <div className=\"additional-info\" style={{ marginTop: 4 }}>\r\n                      {tooltipContent.amrProfilesInfo.map((amr, index) => {\r\n                        if (index < 5) {\r\n                          return (\r\n                            <div key={index} className=\"genotype\">\r\n                              <div className=\"color\" style={{ backgroundColor: getColorForAMR(amr.name) }} />\r\n                              <span>{amr.name}: {amr.count}</span>\r\n                            </div>\r\n                          )\r\n                        } else\r\n                          return null;\r\n                      })}\r\n                    </div>\r\n                  )}\r\n                  {tooltipContent.incTypesInfo && (\r\n                    <div className=\"additional-info\" style={{ marginTop: 4 }}>\r\n                      {tooltipContent.incTypesInfo.map((incType, index) => {\r\n                        if (index < 5) {\r\n                          return (\r\n                            <div key={index} className=\"genotype\">\r\n                              <div className=\"color\" style={{ backgroundColor: getColorForIncType(incType.type) }} />\r\n                              <span>{incType.type}: {incType.count}</span>\r\n                            </div>\r\n                          )\r\n                        } else\r\n                          return null;\r\n                      })}\r\n                    </div>\r\n                  )}\r\n                  {(!tooltipContent.incTypesInfo && !tooltipContent.amrProfilesInfo && !tooltipContent.drugsInfo && !tooltipContent.xdrInfo && !tooltipContent.mdrInfo && !tooltipContent.dcsInfo && !tooltipContent.azInfo && !tooltipContent.cipIInfo && !tooltipContent.cipRInfo && !tooltipContent.simpleGenotypeInfo && !tooltipContent.genotypeInfo && !tooltipContent.additionalInfo) && (\r\n                    <div className=\"additional-info\">\r\n                      <span>{!allCountries.includes(tooltipContent.name) || dataset === 'full' ? 'No reported data' : dataset === 'local' ? 'No travel reported' : 'No travel information'}</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </ReactTooltip>\r\n          </div>\r\n        </div>\r\n        <div className=\"chart-wrapper\" style={{ flexDirection: 'column' }}>\r\n          <h2 style={{ textAlign: \"center\" }}>Now showing: {dataset === \"full\" ? \"All\" : dataset === \"global\" ? \"Local\" : \"Travel\"} data from {actualCountry === \"All\" ? \"all countries\" : actualCountry} from {actualTimePeriodRange.toString().substring(0, 4)} to {actualTimePeriodRange.toString().substring(5)}</h2>\r\n          <FormControl fullWidth className={classes.formControlSelect} style={{ marginBottom: 16, alignItems: \"center\", textAlign: \"center\" }}>\r\n            <label style={{ fontWeight: 500, fontFamily: \"Montserrat\", whiteSpace: \"nowrap\", fontSize: 18 }}>Select country (or click map)</label>\r\n            <Select\r\n              value={actualCountry}\r\n              onChange={evt => setActualCountry(evt.target.value)}\r\n              fullWidth\r\n              style={{ fontWeight: 600, fontFamily: \"Montserrat\", width: 200, textAlign: \"left\" }}\r\n            >\r\n              {countriesForFilter.map((country, index) => {\r\n                return (\r\n                  <MenuItem key={index} style={{ fontWeight: 600, fontFamily: \"Montserrat\" }} value={country}>\r\n                    {country}\r\n                  </MenuItem>\r\n                )\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n          <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n            <div style={{ display: \"flex\", flexDirection: dimensions.width > desktop ? \"row\" : \"column\", marginTop: 16, paddingBottom: 20 }}>\r\n              <div style={{ display: \"flex\", flexDirection: \"column\", flex: 0.5, paddingRight: dimensions.width < mobile ? 0 : 10 }}>\r\n                <div id=\"RFWG\" style={{ height: 458, width: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n                  <div style={{ width: \"100%\", flexDirection: \"row\", textAlign: \"center\", display: \"flex\", justifyContent: \"center\" }}>\r\n                    <span style={{ paddingRight: 32, marginRight: -22, paddingLeft: 35 }} className=\"chart-title\">Resistance frequencies within genotypes</span>\r\n                    <div style={{ display: \"inline-block\", position: \"relative\" }}>\r\n                      <TooltipMaterialUI title={<span style={{ fontFamily: \"Montserrat\" }}>Download Chart as PNG</span>} placement=\"right\">\r\n                        <div\r\n                          style={{ marginTop: \"0\", height: \"33px\", width: \"33px\" }}\r\n                          className={`button ${captureControlChartRFWGInProgress && \"disabled\"}`}\r\n                          onClick={() => {\r\n                            if (!captureControlChartRFWGInProgress)\r\n                              capturePicture('RFWG', 1)\r\n                          }}\r\n                        >\r\n                          <FontAwesomeIcon icon={faCamera} size=\"sm\" />\r\n                        </div>\r\n                      </TooltipMaterialUI>\r\n                      {captureControlChartRFWGInProgress && (\r\n                        <CustomCircularProgress\r\n                          size={44}\r\n                          thickness={4}\r\n                          style={{ position: \"absolute\", top: -5, left: -6 }} />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <span className=\"chart-title\" style={{ marginLeft: 45, marginBottom: -8, marginTop: dimensions.width > 1010 ? 5 : dimensions.width > desktop ? 10 : 10, fontSize: 10, fontWeight: 400 }}>Top Genotypes (up to 5)</span>\r\n                  <div style={{ height: 420, display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}>\r\n                    <span className=\"y-axis-label-vertical\" style={{ paddingRight: 8, marginBottom: /*dimensions.width > desktop ? 80 : 90*/ 100 }}>Number of occurrences</span>\r\n                    {plotDrugsAndGenotypesChart}\r\n                  </div>\r\n                </div>\r\n                <div id=\"RFWAG\" style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", paddingTop: 50 }}>\r\n                  <div style={{ width: \"100%\", flexDirection: \"row\", textAlign: \"center\", display: \"flex\", justifyContent: \"center\" }}>\r\n                    <span className=\"chart-title\" style={{ paddingLeft: 50, marginRight: -22, paddingRight: 32 }}>Resistance determinants within all genotypes</span>\r\n                    <div style={{ display: \"inline-block\", position: \"relative\" }}>\r\n                      <TooltipMaterialUI title={<span style={{ fontFamily: \"Montserrat\" }}>Download Chart as PNG</span>} placement=\"right\">\r\n                        <div\r\n                          style={{ marginTop: \"0\", height: \"33px\", width: \"33px\" }}\r\n                          className={`button ${captureControlChartRFWAGInProgress && \"disabled\"}`}\r\n                          onClick={() => {\r\n                            if (!captureControlChartRFWAGInProgress)\r\n                              capturePicture('RFWAG', 4)\r\n                          }}\r\n                        >\r\n                          <FontAwesomeIcon icon={faCamera} size=\"sm\" />\r\n                        </div>\r\n                      </TooltipMaterialUI>\r\n                      {captureControlChartRFWAGInProgress && (\r\n                        <CustomCircularProgress\r\n                          size={44}\r\n                          thickness={4}\r\n                          style={{ position: \"absolute\", top: -5, left: -6 }} />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <span className=\"chart-title\" style={{ fontSize: 10, fontWeight: 400, paddingBottom: 10, marginTop: dimensions.width > 1120 ? 5 : dimensions.width < desktop ? 10 : 10, paddingLeft: 50 }}>Top Genotypes (up to 10)</span>\r\n                  <div style={{ width: dimensions.width > desktop ? \"60%\" : \"90%\", alignSelf: \"center\", marginBottom: -4, marginRight: dimensions.width > desktop ? \"-10%\" : 0 }}>\r\n                    <FormControl fullWidth className={classes.formControlSelect} style={{ marginTop: 0 }}>\r\n                      <InputLabel style={{ fontWeight: 500, fontFamily: \"Montserrat\" }}>Select Drug Class</InputLabel>\r\n                      <Select\r\n                        value={amrClassFilter}\r\n                        onChange={evt => setAmrClassFilter(evt.target.value)}\r\n                        fullWidth\r\n                        style={{ fontWeight: 600, fontFamily: \"Montserrat\" }}\r\n                      >\r\n                        {amrClassesForFilter.map((amrClass, index) => {\r\n                          return (\r\n                            <MenuItem key={index} style={{ fontWeight: 600, fontFamily: \"Montserrat\" }} value={amrClass}>\r\n                              {amrClass}\r\n                            </MenuItem>\r\n                          )\r\n                        })}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </div>\r\n                  <div style={{ height: 350, display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}>\r\n                    <span className=\"y-axis-label-vertical\" style={{ paddingRight: 8 }}>Number of occurrences</span>\r\n                    {plotAmrClassChart}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"column\", flex: 0.5, paddingLeft: dimensions.width < mobile ? 0 : 10, marginTop: dimensions.width < mobile ? 25 : 0 }}>\r\n                <div id=\"DRT\" style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", marginTop: dimensions.width < desktop ? 50 : dimensions.width < 930 ? 0 : 0 }}>\r\n                  <div style={{ width: \"100%\", flexDirection: \"row\", textAlign: \"center\", display: \"flex\", justifyContent: \"center\", paddingBottom: dimensions.width < desktop ? 0 : dimensions.width < 1010 ? 24 : 8 }}>\r\n                    <span className=\"chart-title\" style={{ paddingRight: 32, marginRight: -22 }}>Drug resistance trends</span>\r\n                    <div style={{ display: \"inline-block\", position: \"relative\" }}>\r\n                      <TooltipMaterialUI title={<span style={{ fontFamily: \"Montserrat\" }}>Download Chart as PNG</span>} placement=\"right\">\r\n                        <div\r\n                          style={{ marginTop: \"0\", height: \"33px\", width: \"33px\" }}\r\n                          className={`button ${captureControlChartDRTInProgress && \"disabled\"}`}\r\n                          onClick={() => {\r\n                            if (!captureControlChartDRTInProgress)\r\n                              capturePicture('DRT', 2)\r\n                          }}\r\n                        >\r\n                          <FontAwesomeIcon icon={faCamera} size=\"sm\" />\r\n                        </div>\r\n                      </TooltipMaterialUI>\r\n                      {captureControlChartDRTInProgress && (\r\n                        <CustomCircularProgress\r\n                          size={44}\r\n                          thickness={4}\r\n                          style={{ position: \"absolute\", top: -5, left: -6 }} />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div style={{ height: 422, display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}>\r\n                    <span className=\"y-axis-label-vertical\" style={{ paddingTop: /*dimensions.width > desktop ? 0 : 0*/ 80 }}>Resistant (%)</span>\r\n                    {plotDrugTrendsChart}\r\n                  </div>\r\n                </div>\r\n                <div id=\"GD\" style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", paddingTop: dimensions.width < desktop ? 50 : dimensions.width < 1010 ? 29 : 45 }}>\r\n                  <div style={{ width: \"100%\", flexDirection: \"row\", textAlign: \"center\", display: \"flex\", justifyContent: \"center\" }}>\r\n                    <span className=\"chart-title\" style={{ marginRight: -22, paddingRight: 32 }}>Genotype distribution</span>\r\n                    <div style={{ display: \"inline-block\", position: \"relative\" }}>\r\n                      <TooltipMaterialUI title={<span style={{ fontFamily: \"Montserrat\" }}>Download Chart as PNG</span>} placement=\"right\">\r\n                        <div\r\n                          style={{ marginTop: \"0\", height: \"33px\", width: \"33px\" }}\r\n                          className={`button ${captureControlChartGDInProgress && \"disabled\"}`}\r\n                          onClick={() => {\r\n                            if (!captureControlChartGDInProgress)\r\n                              capturePicture('GD', 3)\r\n                          }}\r\n                        >\r\n                          <FontAwesomeIcon icon={faCamera} size=\"sm\" />\r\n                        </div>\r\n                      </TooltipMaterialUI>\r\n                      {captureControlChartGDInProgress && (\r\n                        <CustomCircularProgress\r\n                          size={44}\r\n                          thickness={4}\r\n                          style={{ position: \"absolute\", top: -5, left: -6 }} />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div style={{ height: dimensions.width > 1120 ? '78px' : dimensions.width < desktop ? '0px' : '95px', width: dimensions.width > desktop ? \"60%\" : \"90%\", alignSelf: \"center\", paddingRight: dimensions.width > desktop && populationStructureFilter !== 1 ? \"-10%\" : 0, paddingBottom: populationStructureFilter === 1 ? -8 : 16 }}>\r\n                    {/* <FormControl fullWidth className={classes.formControlSelect} style={{ marginBottom: 5, marginTop: 23 }}>\r\n                      <InputLabel style={{ fontWeight: 500, fontFamily: \"Montserrat\" }}>Population Structure</InputLabel>\r\n                      <Select\r\n                        value={populationStructureFilter}\r\n                        onChange={evt => setPopulationStructureFilter(evt.target.value)}\r\n                        fullWidth\r\n                        style={{ fontWeight: 600, fontFamily: \"Montserrat\" }}\r\n                      >\r\n                        <MenuItem style={{ fontWeight: 600, fontFamily: \"Montserrat\" }} value={1}>\r\n                          Genotype\r\n                        </MenuItem>\r\n                        <MenuItem style={{ fontWeight: 600, fontFamily: \"Montserrat\" }} value={2}>\r\n                          H58 / Non-H58\r\n                        </MenuItem>\r\n                      </Select>\r\n                    </FormControl> */}\r\n                  </div>\r\n                  <div style={{ width: '100%', height: 350, display: \"flex\", flexDirection: /*populationStructureFilter === 1 ? \"row\" : \"column-reverse\"*/\"row\", alignItems: \"center\", paddingLeft: populationStructureFilter === 2 ? -22 : 0 }}>\r\n                    {getPopulationStructureChartLabel()}\r\n                    {plotPopulationStructureChart}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div style={{ display: \"flex\", flexDirection: dimensions.width > desktop ? \"row\" : \"column\", padding: 12, alignItems: \"center\", width: \"-webkit-fill-available\", justifyContent: \"center\" }}>\r\n              <div className=\"download-sheet-button\" onClick={() => dowloadBaseSpreadsheet()}>\r\n                <FontAwesomeIcon icon={faTable} style={{ marginRight: 8 }} />\r\n                <span>Download TyphiNET Database</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"about-wrapper\" style={{ paddingBottom: '15px' }}>\r\n          <h2 style={{ marginBottom: 0 }}>About TyphiNET</h2>\r\n          <p>\r\n            The TyphiNET dashboard collates antimicrobial resistance (AMR) and genotype (lineage) information extracted from whole genome sequence (WGS) data from the bacterial pathogen <i>Salmonella</i> Typhi, the agent of typhoid fever. Data are sourced monthly from Typhoid <a href=\"https://pathogen.watch/\" target=\"_blank\" rel=\"noreferrer\">Pathogenwatch</a>. Information on genotype definitions and population structure can be found in <a href=\"https://www.nature.com/articles/ncomms12827\">Wong et al, 2016</a>, and details of AMR determinants in <a href=\"https://www.biorxiv.org/content/10.1101/2020.07.03.186692v2.abstract\">Argimon et al, 2020</a>.\r\n          </p>\r\n          <p>\r\n            The TyphiNET dashboard is coordinated by Dr Zoe Dyson, Dr Louise Cerdeira &amp; Prof Kat Holt at the <a href=\"https://www.lshtm.ac.uk/\" target=\"_blank\" rel=\"noreferrer\">London School of Hygiene and Tropical Medicine</a> &amp; <a href=\"https://www.monash.edu/\">Monash University</a>, supported by the Wellcome Trust (Open Research Fund, 219692/Z/19/Z) and the EU Horizon 2020 research and innovation programme (Marie Skłodowska-Curie grant #845681).\r\n          </p>\r\n          <p>\r\n            <b>Note: This is a beta version, data are incomplete</b>.\r\n          </p>\r\n        </div>\r\n        <div className=\"footer-buttons-wrapper\">\r\n          <div\r\n            className=\"flex-button\"\r\n            onClick={() => {\r\n              window.open('mailto:dashboard@typhi.net', '_blank')\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faEnvelope} style={{ marginRight: 8 }} />\r\n            <span style={{ fontWeight: 600 }}>Contact</span>\r\n          </div>\r\n          <div\r\n            className=\"flex-button\"\r\n            onClick={() => {\r\n              window.open('https://github.com/zadyson/TyphiNET', '_blank')\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faGithub} style={{ marginRight: 8 }} />\r\n            <span style={{ fontWeight: 600 }}>GitHub</span>\r\n          </div>\r\n          <div\r\n            className=\"flex-button\"\r\n            onClick={() => {\r\n              window.open('https://twitter.com/typhinet', '_blank')\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faTwitter} style={{ marginRight: 8 }} />\r\n            <span style={{ fontWeight: 600 }}>Twitter</span>\r\n          </div>\r\n        </div>\r\n        <div style={{ flex: 1 }} />\r\n        <div className=\"footer\">\r\n          <span>Data obtained from: <a href=\"https://pathogen.watch\" rel=\"noreferrer\" target=\"_blank\">pathogen watch project</a> on 07/02/2021. <a href=\"https://holtlab.net\" rel=\"noreferrer\" target=\"_blank\">Holt Lab</a></span>\r\n        </div>\r\n        <div className=\"fab-button\" style={{ marginTop: -80 }}>\r\n          <TooltipMaterialUI title={<span style={{ fontFamily: \"Montserrat\" }}>Reset Configurations</span>} placement=\"left\">\r\n            <Fab\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n              size={dimensions.width < mobile ? 'medium' : ''}\r\n              onClick={() => {\r\n                setMapView('CipI');\r\n                setDataset('full');\r\n                setActualTimePeriodRange(timePeriodRange);\r\n                setControlMapPosition({ coordinates: [0, 0], zoom: 1 });\r\n                setActualCountry('All');\r\n                setPopulationStructureFilter(1);\r\n                setAmrClassFilter(amrClassesForFilter[5]);\r\n              }}\r\n            >\r\n              <FontAwesomeIcon icon={faUndoAlt} size=\"lg\" color=\"white\" />\r\n            </Fab>\r\n          </TooltipMaterialUI>\r\n        </div>\r\n      </div>\r\n      <div className=\"loading\">\r\n        {dimensions.width > desktop && (\r\n          <img className=\"logoImageMenu-loading\" src={typhinetLogoImg} alt=\"TyphiNET\" style={{ paddingLeft: '20px' }} />\r\n        )}\r\n        <Loader\r\n          style={{ paddingLeft: '10px' }}\r\n          type=\"Circles\"\r\n          color=\"#D91E45\"\r\n          height={70}\r\n          width={70}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardPage;","import React from 'react';\r\nimport './App.css';\r\nimport DashboardPage from './pages/dashboard'\r\n// import typhinetLogoImg from './assets/img/logo-typhinet.png';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"content\">\r\n        <DashboardPage/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been pre-cached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\n\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#1fbbd3',\r\n    }\r\n  },\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nregisterServiceWorker();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}